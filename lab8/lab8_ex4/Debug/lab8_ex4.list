
lab8_ex4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001270  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001404  08001404  00011404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001414  08001414  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08001414  08001414  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001414  08001414  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001414  08001414  00011414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001418  08001418  00011418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  0800141c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000008  08001424  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08001424  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   000039b8  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000a5e  00000000  00000000  000239f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000458  00000000  00000000  00024450  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000003f0  00000000  00000000  000248a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000107cd  00000000  00000000  00024c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002a91  00000000  00000000  00035465  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005e507  00000000  00000000  00037ef6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000963fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001168  00000000  00000000  00096478  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000008 	.word	0x20000008
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080013ec 	.word	0x080013ec

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000000c 	.word	0x2000000c
 80001d0:	080013ec 	.word	0x080013ec

080001d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	f003 0307 	and.w	r3, r3, #7
 80001e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001e4:	4b0c      	ldr	r3, [pc, #48]	; (8000218 <__NVIC_SetPriorityGrouping+0x44>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001ea:	68ba      	ldr	r2, [r7, #8]
 80001ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80001f0:	4013      	ands	r3, r2
 80001f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80001f8:	68bb      	ldr	r3, [r7, #8]
 80001fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80001fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000204:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000206:	4a04      	ldr	r2, [pc, #16]	; (8000218 <__NVIC_SetPriorityGrouping+0x44>)
 8000208:	68bb      	ldr	r3, [r7, #8]
 800020a:	60d3      	str	r3, [r2, #12]
}
 800020c:	bf00      	nop
 800020e:	3714      	adds	r7, #20
 8000210:	46bd      	mov	sp, r7
 8000212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000216:	4770      	bx	lr
 8000218:	e000ed00 	.word	0xe000ed00

0800021c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800021c:	b480      	push	{r7}
 800021e:	b083      	sub	sp, #12
 8000220:	af00      	add	r7, sp, #0
 8000222:	4603      	mov	r3, r0
 8000224:	6039      	str	r1, [r7, #0]
 8000226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022c:	2b00      	cmp	r3, #0
 800022e:	db0a      	blt.n	8000246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000230:	683b      	ldr	r3, [r7, #0]
 8000232:	b2da      	uxtb	r2, r3
 8000234:	490c      	ldr	r1, [pc, #48]	; (8000268 <__NVIC_SetPriority+0x4c>)
 8000236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023a:	0112      	lsls	r2, r2, #4
 800023c:	b2d2      	uxtb	r2, r2
 800023e:	440b      	add	r3, r1
 8000240:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000244:	e00a      	b.n	800025c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	b2da      	uxtb	r2, r3
 800024a:	4908      	ldr	r1, [pc, #32]	; (800026c <__NVIC_SetPriority+0x50>)
 800024c:	79fb      	ldrb	r3, [r7, #7]
 800024e:	f003 030f 	and.w	r3, r3, #15
 8000252:	3b04      	subs	r3, #4
 8000254:	0112      	lsls	r2, r2, #4
 8000256:	b2d2      	uxtb	r2, r2
 8000258:	440b      	add	r3, r1
 800025a:	761a      	strb	r2, [r3, #24]
}
 800025c:	bf00      	nop
 800025e:	370c      	adds	r7, #12
 8000260:	46bd      	mov	sp, r7
 8000262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000266:	4770      	bx	lr
 8000268:	e000e100 	.word	0xe000e100
 800026c:	e000ed00 	.word	0xe000ed00

08000270 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	3b01      	subs	r3, #1
 800027c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000280:	d301      	bcc.n	8000286 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000282:	2301      	movs	r3, #1
 8000284:	e00f      	b.n	80002a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000286:	4a0a      	ldr	r2, [pc, #40]	; (80002b0 <SysTick_Config+0x40>)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	3b01      	subs	r3, #1
 800028c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800028e:	210f      	movs	r1, #15
 8000290:	f04f 30ff 	mov.w	r0, #4294967295
 8000294:	f7ff ffc2 	bl	800021c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000298:	4b05      	ldr	r3, [pc, #20]	; (80002b0 <SysTick_Config+0x40>)
 800029a:	2200      	movs	r2, #0
 800029c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800029e:	4b04      	ldr	r3, [pc, #16]	; (80002b0 <SysTick_Config+0x40>)
 80002a0:	2207      	movs	r2, #7
 80002a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80002a4:	2300      	movs	r3, #0
}
 80002a6:	4618      	mov	r0, r3
 80002a8:	3708      	adds	r7, #8
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	e000e010 	.word	0xe000e010

080002b4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80002b8:	4b05      	ldr	r3, [pc, #20]	; (80002d0 <LL_RCC_HSI_Enable+0x1c>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a04      	ldr	r2, [pc, #16]	; (80002d0 <LL_RCC_HSI_Enable+0x1c>)
 80002be:	f043 0301 	orr.w	r3, r3, #1
 80002c2:	6013      	str	r3, [r2, #0]
}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	40023800 	.word	0x40023800

080002d4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80002d8:	4b06      	ldr	r3, [pc, #24]	; (80002f4 <LL_RCC_HSI_IsReady+0x20>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	f003 0302 	and.w	r3, r3, #2
 80002e0:	2b02      	cmp	r3, #2
 80002e2:	bf0c      	ite	eq
 80002e4:	2301      	moveq	r3, #1
 80002e6:	2300      	movne	r3, #0
 80002e8:	b2db      	uxtb	r3, r3
}
 80002ea:	4618      	mov	r0, r3
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr
 80002f4:	40023800 	.word	0x40023800

080002f8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000300:	4b07      	ldr	r3, [pc, #28]	; (8000320 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	00db      	lsls	r3, r3, #3
 800030c:	4904      	ldr	r1, [pc, #16]	; (8000320 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800030e:	4313      	orrs	r3, r2
 8000310:	600b      	str	r3, [r1, #0]
}
 8000312:	bf00      	nop
 8000314:	370c      	adds	r7, #12
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	40023800 	.word	0x40023800

08000324 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800032c:	4b06      	ldr	r3, [pc, #24]	; (8000348 <LL_RCC_SetSysClkSource+0x24>)
 800032e:	689b      	ldr	r3, [r3, #8]
 8000330:	f023 0203 	bic.w	r2, r3, #3
 8000334:	4904      	ldr	r1, [pc, #16]	; (8000348 <LL_RCC_SetSysClkSource+0x24>)
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	4313      	orrs	r3, r2
 800033a:	608b      	str	r3, [r1, #8]
}
 800033c:	bf00      	nop
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr
 8000348:	40023800 	.word	0x40023800

0800034c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000350:	4b04      	ldr	r3, [pc, #16]	; (8000364 <LL_RCC_GetSysClkSource+0x18>)
 8000352:	689b      	ldr	r3, [r3, #8]
 8000354:	f003 030c 	and.w	r3, r3, #12
}
 8000358:	4618      	mov	r0, r3
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	40023800 	.word	0x40023800

08000368 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000370:	4b06      	ldr	r3, [pc, #24]	; (800038c <LL_RCC_SetAHBPrescaler+0x24>)
 8000372:	689b      	ldr	r3, [r3, #8]
 8000374:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000378:	4904      	ldr	r1, [pc, #16]	; (800038c <LL_RCC_SetAHBPrescaler+0x24>)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4313      	orrs	r3, r2
 800037e:	608b      	str	r3, [r1, #8]
}
 8000380:	bf00      	nop
 8000382:	370c      	adds	r7, #12
 8000384:	46bd      	mov	sp, r7
 8000386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038a:	4770      	bx	lr
 800038c:	40023800 	.word	0x40023800

08000390 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000398:	4b06      	ldr	r3, [pc, #24]	; (80003b4 <LL_RCC_SetAPB1Prescaler+0x24>)
 800039a:	689b      	ldr	r3, [r3, #8]
 800039c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80003a0:	4904      	ldr	r1, [pc, #16]	; (80003b4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4313      	orrs	r3, r2
 80003a6:	608b      	str	r3, [r1, #8]
}
 80003a8:	bf00      	nop
 80003aa:	370c      	adds	r7, #12
 80003ac:	46bd      	mov	sp, r7
 80003ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b2:	4770      	bx	lr
 80003b4:	40023800 	.word	0x40023800

080003b8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80003c0:	4b06      	ldr	r3, [pc, #24]	; (80003dc <LL_RCC_SetAPB2Prescaler+0x24>)
 80003c2:	689b      	ldr	r3, [r3, #8]
 80003c4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80003c8:	4904      	ldr	r1, [pc, #16]	; (80003dc <LL_RCC_SetAPB2Prescaler+0x24>)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	4313      	orrs	r3, r2
 80003ce:	608b      	str	r3, [r1, #8]
}
 80003d0:	bf00      	nop
 80003d2:	370c      	adds	r7, #12
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	40023800 	.word	0x40023800

080003e0 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b083      	sub	sp, #12
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 80003e8:	4b07      	ldr	r3, [pc, #28]	; (8000408 <LL_RCC_SetTIMPrescaler+0x28>)
 80003ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80003ee:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80003f2:	4905      	ldr	r1, [pc, #20]	; (8000408 <LL_RCC_SetTIMPrescaler+0x28>)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	4313      	orrs	r3, r2
 80003f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 80003fc:	bf00      	nop
 80003fe:	370c      	adds	r7, #12
 8000400:	46bd      	mov	sp, r7
 8000402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000406:	4770      	bx	lr
 8000408:	40023800 	.word	0x40023800

0800040c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000410:	4b05      	ldr	r3, [pc, #20]	; (8000428 <LL_RCC_PLL_Enable+0x1c>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a04      	ldr	r2, [pc, #16]	; (8000428 <LL_RCC_PLL_Enable+0x1c>)
 8000416:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800041a:	6013      	str	r3, [r2, #0]
}
 800041c:	bf00      	nop
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	40023800 	.word	0x40023800

0800042c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000430:	4b07      	ldr	r3, [pc, #28]	; (8000450 <LL_RCC_PLL_IsReady+0x24>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000438:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800043c:	bf0c      	ite	eq
 800043e:	2301      	moveq	r3, #1
 8000440:	2300      	movne	r3, #0
 8000442:	b2db      	uxtb	r3, r3
}
 8000444:	4618      	mov	r0, r3
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	40023800 	.word	0x40023800

08000454 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8000454:	b480      	push	{r7}
 8000456:	b085      	sub	sp, #20
 8000458:	af00      	add	r7, sp, #0
 800045a:	60f8      	str	r0, [r7, #12]
 800045c:	60b9      	str	r1, [r7, #8]
 800045e:	607a      	str	r2, [r7, #4]
 8000460:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000462:	4b0d      	ldr	r3, [pc, #52]	; (8000498 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000464:	685a      	ldr	r2, [r3, #4]
 8000466:	4b0d      	ldr	r3, [pc, #52]	; (800049c <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8000468:	4013      	ands	r3, r2
 800046a:	68f9      	ldr	r1, [r7, #12]
 800046c:	68ba      	ldr	r2, [r7, #8]
 800046e:	4311      	orrs	r1, r2
 8000470:	687a      	ldr	r2, [r7, #4]
 8000472:	0192      	lsls	r2, r2, #6
 8000474:	430a      	orrs	r2, r1
 8000476:	4908      	ldr	r1, [pc, #32]	; (8000498 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000478:	4313      	orrs	r3, r2
 800047a:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 800047c:	4b06      	ldr	r3, [pc, #24]	; (8000498 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800047e:	685b      	ldr	r3, [r3, #4]
 8000480:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000484:	4904      	ldr	r1, [pc, #16]	; (8000498 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000486:	683b      	ldr	r3, [r7, #0]
 8000488:	4313      	orrs	r3, r2
 800048a:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 800048c:	bf00      	nop
 800048e:	3714      	adds	r7, #20
 8000490:	46bd      	mov	sp, r7
 8000492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000496:	4770      	bx	lr
 8000498:	40023800 	.word	0x40023800
 800049c:	ffbf8000 	.word	0xffbf8000

080004a0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b085      	sub	sp, #20
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80004a8:	4b08      	ldr	r3, [pc, #32]	; (80004cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80004aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004ac:	4907      	ldr	r1, [pc, #28]	; (80004cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	4313      	orrs	r3, r2
 80004b2:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80004b4:	4b05      	ldr	r3, [pc, #20]	; (80004cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80004b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	4013      	ands	r3, r2
 80004bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004be:	68fb      	ldr	r3, [r7, #12]
}
 80004c0:	bf00      	nop
 80004c2:	3714      	adds	r7, #20
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr
 80004cc:	40023800 	.word	0x40023800

080004d0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80004d8:	4b08      	ldr	r3, [pc, #32]	; (80004fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80004da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004dc:	4907      	ldr	r1, [pc, #28]	; (80004fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4313      	orrs	r3, r2
 80004e2:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80004e4:	4b05      	ldr	r3, [pc, #20]	; (80004fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80004e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	4013      	ands	r3, r2
 80004ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004ee:	68fb      	ldr	r3, [r7, #12]
}
 80004f0:	bf00      	nop
 80004f2:	3714      	adds	r7, #20
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr
 80004fc:	40023800 	.word	0x40023800

08000500 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <LL_APB2_GRP1_EnableClock+0x2c>)
 800050a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800050c:	4907      	ldr	r1, [pc, #28]	; (800052c <LL_APB2_GRP1_EnableClock+0x2c>)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	4313      	orrs	r3, r2
 8000512:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000514:	4b05      	ldr	r3, [pc, #20]	; (800052c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000516:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	4013      	ands	r3, r2
 800051c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800051e:	68fb      	ldr	r3, [r7, #12]
}
 8000520:	bf00      	nop
 8000522:	3714      	adds	r7, #20
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr
 800052c:	40023800 	.word	0x40023800

08000530 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <LL_FLASH_SetLatency+0x24>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f023 020f 	bic.w	r2, r3, #15
 8000540:	4904      	ldr	r1, [pc, #16]	; (8000554 <LL_FLASH_SetLatency+0x24>)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4313      	orrs	r3, r2
 8000546:	600b      	str	r3, [r1, #0]
}
 8000548:	bf00      	nop
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	40023c00 	.word	0x40023c00

08000558 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800055c:	4b04      	ldr	r3, [pc, #16]	; (8000570 <LL_FLASH_GetLatency+0x18>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f003 030f 	and.w	r3, r3, #15
}
 8000564:	4618      	mov	r0, r3
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	40023c00 	.word	0x40023c00

08000574 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8000584:	4904      	ldr	r1, [pc, #16]	; (8000598 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4313      	orrs	r3, r2
 800058a:	600b      	str	r3, [r1, #0]
}
 800058c:	bf00      	nop
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr
 8000598:	40007000 	.word	0x40007000

0800059c <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	601a      	str	r2, [r3, #0]
}
 80005b0:	bf00      	nop
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr

080005bc <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80005bc:	b4b0      	push	{r4, r5, r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d01c      	beq.n	8000606 <LL_TIM_OC_DisableFast+0x4a>
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	2b04      	cmp	r3, #4
 80005d0:	d017      	beq.n	8000602 <LL_TIM_OC_DisableFast+0x46>
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	2b10      	cmp	r3, #16
 80005d6:	d012      	beq.n	80005fe <LL_TIM_OC_DisableFast+0x42>
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	2b40      	cmp	r3, #64	; 0x40
 80005dc:	d00d      	beq.n	80005fa <LL_TIM_OC_DisableFast+0x3e>
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80005e4:	d007      	beq.n	80005f6 <LL_TIM_OC_DisableFast+0x3a>
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005ec:	d101      	bne.n	80005f2 <LL_TIM_OC_DisableFast+0x36>
 80005ee:	2305      	movs	r3, #5
 80005f0:	e00a      	b.n	8000608 <LL_TIM_OC_DisableFast+0x4c>
 80005f2:	2306      	movs	r3, #6
 80005f4:	e008      	b.n	8000608 <LL_TIM_OC_DisableFast+0x4c>
 80005f6:	2304      	movs	r3, #4
 80005f8:	e006      	b.n	8000608 <LL_TIM_OC_DisableFast+0x4c>
 80005fa:	2303      	movs	r3, #3
 80005fc:	e004      	b.n	8000608 <LL_TIM_OC_DisableFast+0x4c>
 80005fe:	2302      	movs	r3, #2
 8000600:	e002      	b.n	8000608 <LL_TIM_OC_DisableFast+0x4c>
 8000602:	2301      	movs	r3, #1
 8000604:	e000      	b.n	8000608 <LL_TIM_OC_DisableFast+0x4c>
 8000606:	2300      	movs	r3, #0
 8000608:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	3318      	adds	r3, #24
 800060e:	461a      	mov	r2, r3
 8000610:	4629      	mov	r1, r5
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <LL_TIM_OC_DisableFast+0x7c>)
 8000614:	5c5b      	ldrb	r3, [r3, r1]
 8000616:	4413      	add	r3, r2
 8000618:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800061a:	6822      	ldr	r2, [r4, #0]
 800061c:	4629      	mov	r1, r5
 800061e:	4b07      	ldr	r3, [pc, #28]	; (800063c <LL_TIM_OC_DisableFast+0x80>)
 8000620:	5c5b      	ldrb	r3, [r3, r1]
 8000622:	4619      	mov	r1, r3
 8000624:	2304      	movs	r3, #4
 8000626:	408b      	lsls	r3, r1
 8000628:	43db      	mvns	r3, r3
 800062a:	4013      	ands	r3, r2
 800062c:	6023      	str	r3, [r4, #0]

}
 800062e:	bf00      	nop
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	bcb0      	pop	{r4, r5, r7}
 8000636:	4770      	bx	lr
 8000638:	08001404 	.word	0x08001404
 800063c:	0800140c 	.word	0x0800140c

08000640 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	689b      	ldr	r3, [r3, #8]
 800064e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000652:	f023 0307 	bic.w	r3, r3, #7
 8000656:	683a      	ldr	r2, [r7, #0]
 8000658:	431a      	orrs	r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	609a      	str	r2, [r3, #8]
}
 800065e:	bf00      	nop
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr

0800066a <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 800066a:	b480      	push	{r7}
 800066c:	b083      	sub	sp, #12
 800066e:	af00      	add	r7, sp, #0
 8000670:	6078      	str	r0, [r7, #4]
 8000672:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	685b      	ldr	r3, [r3, #4]
 8000678:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	431a      	orrs	r2, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	605a      	str	r2, [r3, #4]
}
 8000684:	bf00      	nop
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr

08000690 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	689b      	ldr	r3, [r3, #8]
 800069c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	609a      	str	r2, [r3, #8]
}
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	041a      	lsls	r2, r3, #16
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	619a      	str	r2, [r3, #24]
}
 80006c2:	bf00      	nop
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
	...

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80006d6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80006da:	f7ff ff11 	bl	8000500 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80006de:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80006e2:	f7ff fef5 	bl	80004d0 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006e6:	2003      	movs	r0, #3
 80006e8:	f7ff fd74 	bl	80001d4 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ec:	f000 f870 	bl	80007d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f0:	f000 f934 	bl	800095c <MX_GPIO_Init>
  MX_TIM3_Init();
 80006f4:	f000 f8b8 	bl	8000868 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  // enable the counter
  LL_TIM_WriteReg(TIM3 , CR1 , LL_TIM_ReadReg(TIM3 , CR1) | 0x01);
 80006f8:	4b30      	ldr	r3, [pc, #192]	; (80007bc <main+0xec>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a2f      	ldr	r2, [pc, #188]	; (80007bc <main+0xec>)
 80006fe:	f043 0301 	orr.w	r3, r3, #1
 8000702:	6013      	str	r3, [r2, #0]
  // ENABLE the ch1 and ch2 pins
  LL_TIM_WriteReg(TIM3 , CCER ,LL_TIM_ReadReg(TIM3 ,CCER) | 0x11);
 8000704:	4b2d      	ldr	r3, [pc, #180]	; (80007bc <main+0xec>)
 8000706:	6a1b      	ldr	r3, [r3, #32]
 8000708:	4a2c      	ldr	r2, [pc, #176]	; (80007bc <main+0xec>)
 800070a:	f043 0311 	orr.w	r3, r3, #17
 800070e:	6213      	str	r3, [r2, #32]
  // redundant two line however it shows that our two channels are output
  //LL_TIM_WriteReg(TIM3 , CCMR1 ,LL_TIM_ReadReg(TIM3 ,CCMR1) & (~0x3));
  //LL_TIM_WriteReg(TIM3 , CCMR1 ,LL_TIM_ReadReg(TIM3 ,CCMR1) & (~0x300));
  LL_TIM_WriteReg(TIM3 , CCR1, HF_PERIOD_1);
 8000710:	4b2a      	ldr	r3, [pc, #168]	; (80007bc <main+0xec>)
 8000712:	f244 12a0 	movw	r2, #16800	; 0x41a0
 8000716:	635a      	str	r2, [r3, #52]	; 0x34
  LL_TIM_WriteReg(TIM3 , CCR2, HF_PERIOD_2);
 8000718:	4b28      	ldr	r3, [pc, #160]	; (80007bc <main+0xec>)
 800071a:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 800071e:	639a      	str	r2, [r3, #56]	; 0x38

  unsigned int delta_1 =0 ,delta_2 =0 ;
 8000720:	2300      	movs	r3, #0
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	2300      	movs	r3, #0
 8000726:	603b      	str	r3, [r7, #0]
  SysTick_Config(SystemCoreClock / 1000);
 8000728:	4b25      	ldr	r3, [pc, #148]	; (80007c0 <main+0xf0>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a25      	ldr	r2, [pc, #148]	; (80007c4 <main+0xf4>)
 800072e:	fba2 2303 	umull	r2, r3, r2, r3
 8000732:	099b      	lsrs	r3, r3, #6
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff fd9b 	bl	8000270 <SysTick_Config>

  // the output pins for ch1 and ch2 are pc6 and pc7 respectively
  while (1)
  {
    /* USER CODE END WHILE */
	  if((LL_TIM_ReadReg(TIM3 , SR) & 0x02) == 0x02){
 800073a:	4b20      	ldr	r3, [pc, #128]	; (80007bc <main+0xec>)
 800073c:	691b      	ldr	r3, [r3, #16]
 800073e:	f003 0302 	and.w	r3, r3, #2
 8000742:	2b02      	cmp	r3, #2
 8000744:	d11a      	bne.n	800077c <main+0xac>
		  delta_1 += HF_PERIOD_1;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	f503 4383 	add.w	r3, r3, #16768	; 0x4180
 800074c:	3320      	adds	r3, #32
 800074e:	607b      	str	r3, [r7, #4]
		  //LL_DBGMCU_APB1_GRP1_FreezePeriph(LL_DBGMCU_APB1_GRP1_TIM3_STOP);
		  LL_TIM_WriteReg(TIM3 ,CCR1 , LL_TIM_ReadReg(TIM3 ,CCR1) + HF_PERIOD_1);
 8000750:	4b1a      	ldr	r3, [pc, #104]	; (80007bc <main+0xec>)
 8000752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000754:	4a19      	ldr	r2, [pc, #100]	; (80007bc <main+0xec>)
 8000756:	f503 4383 	add.w	r3, r3, #16768	; 0x4180
 800075a:	3320      	adds	r3, #32
 800075c:	6353      	str	r3, [r2, #52]	; 0x34
		  //this command writes the content of PC6 into PA6 because PC6 is tim3_ch1 and PA6 is our output peripheral
		  //LL_GPIO_WriteReg(GPIOA ,ODR , LL_GPIO_ReadReg(GPIOA ,ODR) ^ 0x40);
		  LL_GPIO_WriteReg(GPIOA ,ODR , LL_GPIO_ReadReg(GPIOA ,ODR) | ((LL_GPIO_ReadReg(GPIOC ,ODR) & (0x40))));
 800075e:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <main+0xf8>)
 8000760:	695a      	ldr	r2, [r3, #20]
 8000762:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <main+0xfc>)
 8000764:	695b      	ldr	r3, [r3, #20]
 8000766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800076a:	4917      	ldr	r1, [pc, #92]	; (80007c8 <main+0xf8>)
 800076c:	4313      	orrs	r3, r2
 800076e:	614b      	str	r3, [r1, #20]
		  LL_TIM_WriteReg(TIM3 ,SR , LL_TIM_ReadReg(TIM3 , SR) & (~0x02));
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <main+0xec>)
 8000772:	691b      	ldr	r3, [r3, #16]
 8000774:	4a11      	ldr	r2, [pc, #68]	; (80007bc <main+0xec>)
 8000776:	f023 0302 	bic.w	r3, r3, #2
 800077a:	6113      	str	r3, [r2, #16]
	  }
	  if((LL_TIM_ReadReg(TIM3 , SR) & 0x04) == 0x04){
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <main+0xec>)
 800077e:	691b      	ldr	r3, [r3, #16]
 8000780:	f003 0304 	and.w	r3, r3, #4
 8000784:	2b04      	cmp	r3, #4
 8000786:	d1d8      	bne.n	800073a <main+0x6a>
		  delta_2 += HF_PERIOD_2 ;
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 800078e:	603b      	str	r3, [r7, #0]
		  LL_TIM_WriteReg(TIM3 , CCR2, LL_TIM_ReadReg(TIM3 ,CCR2) + HF_PERIOD_2);
 8000790:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <main+0xec>)
 8000792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000794:	4a09      	ldr	r2, [pc, #36]	; (80007bc <main+0xec>)
 8000796:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 800079a:	6393      	str	r3, [r2, #56]	; 0x38
		  //LL_GPIO_WriteReg(GPIOA ,ODR , LL_GPIO_ReadReg(GPIOA ,ODR) ^ 0x80);
		  LL_GPIO_WriteReg(GPIOA ,ODR , LL_GPIO_ReadReg(GPIOA ,ODR) | ((LL_GPIO_ReadReg(GPIOC ,ODR) & (0x80))));
 800079c:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <main+0xf8>)
 800079e:	695a      	ldr	r2, [r3, #20]
 80007a0:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <main+0xfc>)
 80007a2:	695b      	ldr	r3, [r3, #20]
 80007a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a8:	4907      	ldr	r1, [pc, #28]	; (80007c8 <main+0xf8>)
 80007aa:	4313      	orrs	r3, r2
 80007ac:	614b      	str	r3, [r1, #20]
		  LL_TIM_WriteReg(TIM3 ,SR , LL_TIM_ReadReg(TIM3 , SR) & (~0x04));
 80007ae:	4b03      	ldr	r3, [pc, #12]	; (80007bc <main+0xec>)
 80007b0:	691b      	ldr	r3, [r3, #16]
 80007b2:	4a02      	ldr	r2, [pc, #8]	; (80007bc <main+0xec>)
 80007b4:	f023 0304 	bic.w	r3, r3, #4
 80007b8:	6113      	str	r3, [r2, #16]
	  if((LL_TIM_ReadReg(TIM3 , SR) & 0x02) == 0x02){
 80007ba:	e7be      	b.n	800073a <main+0x6a>
 80007bc:	40000400 	.word	0x40000400
 80007c0:	20000004 	.word	0x20000004
 80007c4:	10624dd3 	.word	0x10624dd3
 80007c8:	40020000 	.word	0x40020000
 80007cc:	40020800 	.word	0x40020800

080007d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 80007d4:	2002      	movs	r0, #2
 80007d6:	f7ff feab 	bl	8000530 <LL_FLASH_SetLatency>

   if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2)
 80007da:	f7ff febd 	bl	8000558 <LL_FLASH_GetLatency>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b02      	cmp	r3, #2
 80007e2:	d001      	beq.n	80007e8 <SystemClock_Config+0x18>
  {
  Error_Handler();  
 80007e4:	f000 f8e4 	bl	80009b0 <Error_Handler>
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 80007e8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80007ec:	f7ff fec2 	bl	8000574 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 80007f0:	2010      	movs	r0, #16
 80007f2:	f7ff fd81 	bl	80002f8 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 80007f6:	f7ff fd5d 	bl	80002b4 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80007fa:	bf00      	nop
 80007fc:	f7ff fd6a 	bl	80002d4 <LL_RCC_HSI_IsReady>
 8000800:	4603      	mov	r3, r0
 8000802:	2b01      	cmp	r3, #1
 8000804:	d1fa      	bne.n	80007fc <SystemClock_Config+0x2c>
  {
    
  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_16, 336, LL_RCC_PLLP_DIV_4);
 8000806:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800080a:	f44f 72a8 	mov.w	r2, #336	; 0x150
 800080e:	2110      	movs	r1, #16
 8000810:	2000      	movs	r0, #0
 8000812:	f7ff fe1f 	bl	8000454 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000816:	f7ff fdf9 	bl	800040c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800081a:	bf00      	nop
 800081c:	f7ff fe06 	bl	800042c <LL_RCC_PLL_IsReady>
 8000820:	4603      	mov	r3, r0
 8000822:	2b01      	cmp	r3, #1
 8000824:	d1fa      	bne.n	800081c <SystemClock_Config+0x4c>
  {
    
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000826:	2000      	movs	r0, #0
 8000828:	f7ff fd9e 	bl	8000368 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 800082c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000830:	f7ff fdae 	bl	8000390 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000834:	2000      	movs	r0, #0
 8000836:	f7ff fdbf 	bl	80003b8 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800083a:	2002      	movs	r0, #2
 800083c:	f7ff fd72 	bl	8000324 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000840:	bf00      	nop
 8000842:	f7ff fd83 	bl	800034c <LL_RCC_GetSysClkSource>
 8000846:	4603      	mov	r3, r0
 8000848:	2b08      	cmp	r3, #8
 800084a:	d1fa      	bne.n	8000842 <SystemClock_Config+0x72>
  {
  
  }
  LL_Init1msTick(84000000);
 800084c:	4805      	ldr	r0, [pc, #20]	; (8000864 <SystemClock_Config+0x94>)
 800084e:	f000 fd83 	bl	8001358 <LL_Init1msTick>
  LL_SetSystemCoreClock(84000000);
 8000852:	4804      	ldr	r0, [pc, #16]	; (8000864 <SystemClock_Config+0x94>)
 8000854:	f000 fd8e 	bl	8001374 <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8000858:	2000      	movs	r0, #0
 800085a:	f7ff fdc1 	bl	80003e0 <LL_RCC_SetTIMPrescaler>
}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	0501bd00 	.word	0x0501bd00

08000868 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b094      	sub	sp, #80	; 0x50
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800086e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	2220      	movs	r2, #32
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f000 fda8 	bl	80013dc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]
 800089a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 800089c:	2002      	movs	r0, #2
 800089e:	f7ff fe17 	bl	80004d0 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80008a6:	2300      	movs	r3, #0
 80008a8:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 65535;
 80008aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008ae:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80008b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80008b8:	4619      	mov	r1, r3
 80008ba:	4826      	ldr	r0, [pc, #152]	; (8000954 <MX_TIM3_Init+0xec>)
 80008bc:	f000 faf4 	bl	8000ea8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 80008c0:	4824      	ldr	r0, [pc, #144]	; (8000954 <MX_TIM3_Init+0xec>)
 80008c2:	f7ff fe6b 	bl	800059c <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 80008c6:	2100      	movs	r1, #0
 80008c8:	4822      	ldr	r0, [pc, #136]	; (8000954 <MX_TIM3_Init+0xec>)
 80008ca:	f7ff feb9 	bl	8000640 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_TOGGLE;
 80008ce:	2330      	movs	r3, #48	; 0x30
 80008d0:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80008d2:	2300      	movs	r3, #0
 80008d4:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 80008da:	2300      	movs	r3, #0
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80008de:	2300      	movs	r3, #0
 80008e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	461a      	mov	r2, r3
 80008e8:	2101      	movs	r1, #1
 80008ea:	481a      	ldr	r0, [pc, #104]	; (8000954 <MX_TIM3_Init+0xec>)
 80008ec:	f000 fb56 	bl	8000f9c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 80008f0:	2101      	movs	r1, #1
 80008f2:	4818      	ldr	r0, [pc, #96]	; (8000954 <MX_TIM3_Init+0xec>)
 80008f4:	f7ff fe62 	bl	80005bc <LL_TIM_OC_DisableFast>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	461a      	mov	r2, r3
 8000906:	2110      	movs	r1, #16
 8000908:	4812      	ldr	r0, [pc, #72]	; (8000954 <MX_TIM3_Init+0xec>)
 800090a:	f000 fb47 	bl	8000f9c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH2);
 800090e:	2110      	movs	r1, #16
 8000910:	4810      	ldr	r0, [pc, #64]	; (8000954 <MX_TIM3_Init+0xec>)
 8000912:	f7ff fe53 	bl	80005bc <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8000916:	2100      	movs	r1, #0
 8000918:	480e      	ldr	r0, [pc, #56]	; (8000954 <MX_TIM3_Init+0xec>)
 800091a:	f7ff fea6 	bl	800066a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 800091e:	480d      	ldr	r0, [pc, #52]	; (8000954 <MX_TIM3_Init+0xec>)
 8000920:	f7ff feb6 	bl	8000690 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000924:	2004      	movs	r0, #4
 8000926:	f7ff fdbb 	bl	80004a0 <LL_AHB1_GRP1_EnableClock>
  /**TIM3 GPIO Configuration  
  PC6   ------> TIM3_CH1
  PC7   ------> TIM3_CH2 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800092a:	23c0      	movs	r3, #192	; 0xc0
 800092c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800092e:	2302      	movs	r3, #2
 8000930:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800093a:	2300      	movs	r3, #0
 800093c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800093e:	2302      	movs	r3, #2
 8000940:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	4619      	mov	r1, r3
 8000946:	4804      	ldr	r0, [pc, #16]	; (8000958 <MX_TIM3_Init+0xf0>)
 8000948:	f000 f9c8 	bl	8000cdc <LL_GPIO_Init>

}
 800094c:	bf00      	nop
 800094e:	3750      	adds	r7, #80	; 0x50
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40000400 	.word	0x40000400
 8000958:	40020800 	.word	0x40020800

0800095c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000962:	463b      	mov	r3, r7
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
 8000970:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000972:	2001      	movs	r0, #1
 8000974:	f7ff fd94 	bl	80004a0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000978:	2004      	movs	r0, #4
 800097a:	f7ff fd91 	bl	80004a0 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_6|LL_GPIO_PIN_7);
 800097e:	21c0      	movs	r1, #192	; 0xc0
 8000980:	480a      	ldr	r0, [pc, #40]	; (80009ac <MX_GPIO_Init+0x50>)
 8000982:	f7ff fe95 	bl	80006b0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8000986:	23c0      	movs	r3, #192	; 0xc0
 8000988:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800098a:	2301      	movs	r3, #1
 800098c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000996:	2300      	movs	r3, #0
 8000998:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099a:	463b      	mov	r3, r7
 800099c:	4619      	mov	r1, r3
 800099e:	4803      	ldr	r0, [pc, #12]	; (80009ac <MX_GPIO_Init+0x50>)
 80009a0:	f000 f99c 	bl	8000cdc <LL_GPIO_Init>

}
 80009a4:	bf00      	nop
 80009a6:	3718      	adds	r7, #24
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40020000 	.word	0x40020000

080009b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <HardFault_Handler+0x4>

080009d2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <MemManage_Handler+0x4>

080009d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <BusFault_Handler+0x4>

080009de <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <UsageFault_Handler+0x4>

080009e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr

080009f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
	...

08000a10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	static int x=0x12c0; // What is this number ?
	 for(int i=0;i<x;i++);
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	e002      	b.n	8000a22 <SysTick_Handler+0x12>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <SysTick_Handler+0x40>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	dbf7      	blt.n	8000a1c <SysTick_Handler+0xc>
	 x = (x >> 2) | (((x & 1)^(x & 2)) << 4);
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <SysTick_Handler+0x40>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	109a      	asrs	r2, r3, #2
 8000a32:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <SysTick_Handler+0x40>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	011b      	lsls	r3, r3, #4
 8000a38:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	4a04      	ldr	r2, [pc, #16]	; (8000a50 <SysTick_Handler+0x40>)
 8000a40:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	20000000 	.word	0x20000000

08000a54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <SystemInit+0x28>)
 8000a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a5e:	4a07      	ldr	r2, [pc, #28]	; (8000a7c <SystemInit+0x28>)
 8000a60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a68:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <SystemInit+0x28>)
 8000a6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a6e:	609a      	str	r2, [r3, #8]
#endif
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ab8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a84:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a86:	e003      	b.n	8000a90 <LoopCopyDataInit>

08000a88 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a8a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a8c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a8e:	3104      	adds	r1, #4

08000a90 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a90:	480b      	ldr	r0, [pc, #44]	; (8000ac0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a92:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a94:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a96:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a98:	d3f6      	bcc.n	8000a88 <CopyDataInit>
  ldr  r2, =_sbss
 8000a9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ac8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a9c:	e002      	b.n	8000aa4 <LoopFillZerobss>

08000a9e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a9e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000aa0:	f842 3b04 	str.w	r3, [r2], #4

08000aa4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000aa4:	4b09      	ldr	r3, [pc, #36]	; (8000acc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000aa6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000aa8:	d3f9      	bcc.n	8000a9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000aaa:	f7ff ffd3 	bl	8000a54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aae:	f000 fc71 	bl	8001394 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ab2:	f7ff fe0d 	bl	80006d0 <main>
  bx  lr    
 8000ab6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ab8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000abc:	0800141c 	.word	0x0800141c
  ldr  r0, =_sdata
 8000ac0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ac4:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 8000ac8:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 8000acc:	20000024 	.word	0x20000024

08000ad0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ad0:	e7fe      	b.n	8000ad0 <ADC_IRQHandler>

08000ad2 <LL_GPIO_SetPinMode>:
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b089      	sub	sp, #36	; 0x24
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	60f8      	str	r0, [r7, #12]
 8000ada:	60b9      	str	r1, [r7, #8]
 8000adc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	fa93 f3a3 	rbit	r3, r3
 8000aec:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	fab3 f383 	clz	r3, r3
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	2103      	movs	r1, #3
 8000afa:	fa01 f303 	lsl.w	r3, r1, r3
 8000afe:	43db      	mvns	r3, r3
 8000b00:	401a      	ands	r2, r3
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	fa93 f3a3 	rbit	r3, r3
 8000b0c:	61bb      	str	r3, [r7, #24]
  return result;
 8000b0e:	69bb      	ldr	r3, [r7, #24]
 8000b10:	fab3 f383 	clz	r3, r3
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	6879      	ldr	r1, [r7, #4]
 8000b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1e:	431a      	orrs	r2, r3
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	601a      	str	r2, [r3, #0]
}
 8000b24:	bf00      	nop
 8000b26:	3724      	adds	r7, #36	; 0x24
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <LL_GPIO_SetPinOutputType>:
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	685a      	ldr	r2, [r3, #4]
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	43db      	mvns	r3, r3
 8000b44:	401a      	ands	r2, r3
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	6879      	ldr	r1, [r7, #4]
 8000b4a:	fb01 f303 	mul.w	r3, r1, r3
 8000b4e:	431a      	orrs	r2, r3
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	605a      	str	r2, [r3, #4]
}
 8000b54:	bf00      	nop
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <LL_GPIO_SetPinSpeed>:
{
 8000b60:	b480      	push	{r7}
 8000b62:	b089      	sub	sp, #36	; 0x24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	689a      	ldr	r2, [r3, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	fa93 f3a3 	rbit	r3, r3
 8000b7a:	613b      	str	r3, [r7, #16]
  return result;
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	fab3 f383 	clz	r3, r3
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	2103      	movs	r1, #3
 8000b88:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8c:	43db      	mvns	r3, r3
 8000b8e:	401a      	ands	r2, r3
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	fa93 f3a3 	rbit	r3, r3
 8000b9a:	61bb      	str	r3, [r7, #24]
  return result;
 8000b9c:	69bb      	ldr	r3, [r7, #24]
 8000b9e:	fab3 f383 	clz	r3, r3
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	6879      	ldr	r1, [r7, #4]
 8000ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bac:	431a      	orrs	r2, r3
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	609a      	str	r2, [r3, #8]
}
 8000bb2:	bf00      	nop
 8000bb4:	3724      	adds	r7, #36	; 0x24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <LL_GPIO_SetPinPull>:
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b089      	sub	sp, #36	; 0x24
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	60f8      	str	r0, [r7, #12]
 8000bc6:	60b9      	str	r1, [r7, #8]
 8000bc8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	68da      	ldr	r2, [r3, #12]
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	fa93 f3a3 	rbit	r3, r3
 8000bd8:	613b      	str	r3, [r7, #16]
  return result;
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	fab3 f383 	clz	r3, r3
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	2103      	movs	r1, #3
 8000be6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bea:	43db      	mvns	r3, r3
 8000bec:	401a      	ands	r2, r3
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	fa93 f3a3 	rbit	r3, r3
 8000bf8:	61bb      	str	r3, [r7, #24]
  return result;
 8000bfa:	69bb      	ldr	r3, [r7, #24]
 8000bfc:	fab3 f383 	clz	r3, r3
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	6879      	ldr	r1, [r7, #4]
 8000c06:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0a:	431a      	orrs	r2, r3
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	60da      	str	r2, [r3, #12]
}
 8000c10:	bf00      	nop
 8000c12:	3724      	adds	r7, #36	; 0x24
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <LL_GPIO_SetAFPin_0_7>:
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b089      	sub	sp, #36	; 0x24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	6a1a      	ldr	r2, [r3, #32]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	fa93 f3a3 	rbit	r3, r3
 8000c36:	613b      	str	r3, [r7, #16]
  return result;
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	fab3 f383 	clz	r3, r3
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	210f      	movs	r1, #15
 8000c44:	fa01 f303 	lsl.w	r3, r1, r3
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	401a      	ands	r2, r3
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c50:	69fb      	ldr	r3, [r7, #28]
 8000c52:	fa93 f3a3 	rbit	r3, r3
 8000c56:	61bb      	str	r3, [r7, #24]
  return result;
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	fab3 f383 	clz	r3, r3
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	6879      	ldr	r1, [r7, #4]
 8000c64:	fa01 f303 	lsl.w	r3, r1, r3
 8000c68:	431a      	orrs	r2, r3
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	621a      	str	r2, [r3, #32]
}
 8000c6e:	bf00      	nop
 8000c70:	3724      	adds	r7, #36	; 0x24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <LL_GPIO_SetAFPin_8_15>:
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	b089      	sub	sp, #36	; 0x24
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	60f8      	str	r0, [r7, #12]
 8000c82:	60b9      	str	r1, [r7, #8]
 8000c84:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	0a1b      	lsrs	r3, r3, #8
 8000c8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	fa93 f3a3 	rbit	r3, r3
 8000c96:	613b      	str	r3, [r7, #16]
  return result;
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	fab3 f383 	clz	r3, r3
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	210f      	movs	r1, #15
 8000ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	401a      	ands	r2, r3
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	0a1b      	lsrs	r3, r3, #8
 8000cb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	fa93 f3a3 	rbit	r3, r3
 8000cb8:	61bb      	str	r3, [r7, #24]
  return result;
 8000cba:	69bb      	ldr	r3, [r7, #24]
 8000cbc:	fab3 f383 	clz	r3, r3
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	6879      	ldr	r1, [r7, #4]
 8000cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cca:	431a      	orrs	r2, r3
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000cd0:	bf00      	nop
 8000cd2:	3724      	adds	r7, #36	; 0x24
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b088      	sub	sp, #32
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	fa93 f3a3 	rbit	r3, r3
 8000cfa:	613b      	str	r3, [r7, #16]
  return result;
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	fab3 f383 	clz	r3, r3
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000d06:	e050      	b.n	8000daa <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	fa01 f303 	lsl.w	r3, r1, r3
 8000d14:	4013      	ands	r3, r2
 8000d16:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d042      	beq.n	8000da4 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d003      	beq.n	8000d2e <LL_GPIO_Init+0x52>
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	d10d      	bne.n	8000d4a <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	461a      	mov	r2, r3
 8000d34:	69b9      	ldr	r1, [r7, #24]
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f7ff ff12 	bl	8000b60 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	461a      	mov	r2, r3
 8000d42:	69b9      	ldr	r1, [r7, #24]
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f7ff fef3 	bl	8000b30 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	691b      	ldr	r3, [r3, #16]
 8000d4e:	461a      	mov	r2, r3
 8000d50:	69b9      	ldr	r1, [r7, #24]
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f7ff ff33 	bl	8000bbe <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d11a      	bne.n	8000d96 <LL_GPIO_Init+0xba>
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	fa93 f3a3 	rbit	r3, r3
 8000d6a:	60bb      	str	r3, [r7, #8]
  return result;
 8000d6c:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8000d6e:	fab3 f383 	clz	r3, r3
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	2b07      	cmp	r3, #7
 8000d76:	d807      	bhi.n	8000d88 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	695b      	ldr	r3, [r3, #20]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	69b9      	ldr	r1, [r7, #24]
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f7ff ff4b 	bl	8000c1c <LL_GPIO_SetAFPin_0_7>
 8000d86:	e006      	b.n	8000d96 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	695b      	ldr	r3, [r3, #20]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	69b9      	ldr	r1, [r7, #24]
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f7ff ff72 	bl	8000c7a <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	69b9      	ldr	r1, [r7, #24]
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f7ff fe97 	bl	8000ad2 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	3301      	adds	r3, #1
 8000da8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	fa22 f303 	lsr.w	r3, r2, r3
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d1a7      	bne.n	8000d08 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3720      	adds	r7, #32
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <LL_TIM_SetPrescaler>:
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	b083      	sub	sp, #12
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
 8000dca:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	683a      	ldr	r2, [r7, #0]
 8000dd0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <LL_TIM_SetAutoReload>:
{
 8000dde:	b480      	push	{r7}
 8000de0:	b083      	sub	sp, #12
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
 8000de6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	683a      	ldr	r2, [r7, #0]
 8000dec:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000dee:	bf00      	nop
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <LL_TIM_SetRepetitionCounter>:
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	b083      	sub	sp, #12
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
 8000e02:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	683a      	ldr	r2, [r7, #0]
 8000e08:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <LL_TIM_OC_SetCompareCH1>:
{
 8000e16:	b480      	push	{r7}
 8000e18:	b083      	sub	sp, #12
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
 8000e1e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	683a      	ldr	r2, [r7, #0]
 8000e24:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e26:	bf00      	nop
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <LL_TIM_OC_SetCompareCH2>:
{
 8000e32:	b480      	push	{r7}
 8000e34:	b083      	sub	sp, #12
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
 8000e3a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	683a      	ldr	r2, [r7, #0]
 8000e40:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <LL_TIM_OC_SetCompareCH3>:
{
 8000e4e:	b480      	push	{r7}
 8000e50:	b083      	sub	sp, #12
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
 8000e56:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	683a      	ldr	r2, [r7, #0]
 8000e5c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000e5e:	bf00      	nop
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <LL_TIM_OC_SetCompareCH4>:
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	b083      	sub	sp, #12
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
 8000e72:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	683a      	ldr	r2, [r7, #0]
 8000e78:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000e7a:	bf00      	nop
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8000e86:	b480      	push	{r7}
 8000e88:	b083      	sub	sp, #12
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	f043 0201 	orr.w	r2, r3, #1
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	615a      	str	r2, [r3, #20]
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
	...

08000ea8 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4a31      	ldr	r2, [pc, #196]	; (8000f80 <LL_TIM_Init+0xd8>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d00f      	beq.n	8000ee0 <LL_TIM_Init+0x38>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ec6:	d00b      	beq.n	8000ee0 <LL_TIM_Init+0x38>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a2e      	ldr	r2, [pc, #184]	; (8000f84 <LL_TIM_Init+0xdc>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d007      	beq.n	8000ee0 <LL_TIM_Init+0x38>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4a2d      	ldr	r2, [pc, #180]	; (8000f88 <LL_TIM_Init+0xe0>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d003      	beq.n	8000ee0 <LL_TIM_Init+0x38>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a2c      	ldr	r2, [pc, #176]	; (8000f8c <LL_TIM_Init+0xe4>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d106      	bne.n	8000eee <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a23      	ldr	r2, [pc, #140]	; (8000f80 <LL_TIM_Init+0xd8>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d01b      	beq.n	8000f2e <LL_TIM_Init+0x86>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000efc:	d017      	beq.n	8000f2e <LL_TIM_Init+0x86>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a20      	ldr	r2, [pc, #128]	; (8000f84 <LL_TIM_Init+0xdc>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d013      	beq.n	8000f2e <LL_TIM_Init+0x86>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a1f      	ldr	r2, [pc, #124]	; (8000f88 <LL_TIM_Init+0xe0>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d00f      	beq.n	8000f2e <LL_TIM_Init+0x86>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a1e      	ldr	r2, [pc, #120]	; (8000f8c <LL_TIM_Init+0xe4>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d00b      	beq.n	8000f2e <LL_TIM_Init+0x86>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a1d      	ldr	r2, [pc, #116]	; (8000f90 <LL_TIM_Init+0xe8>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d007      	beq.n	8000f2e <LL_TIM_Init+0x86>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a1c      	ldr	r2, [pc, #112]	; (8000f94 <LL_TIM_Init+0xec>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d003      	beq.n	8000f2e <LL_TIM_Init+0x86>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a1b      	ldr	r2, [pc, #108]	; (8000f98 <LL_TIM_Init+0xf0>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d106      	bne.n	8000f3c <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	4619      	mov	r1, r3
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff ff48 	bl	8000dde <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	881b      	ldrh	r3, [r3, #0]
 8000f52:	4619      	mov	r1, r3
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff ff34 	bl	8000dc2 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a08      	ldr	r2, [pc, #32]	; (8000f80 <LL_TIM_Init+0xd8>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d105      	bne.n	8000f6e <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	7c1b      	ldrb	r3, [r3, #16]
 8000f66:	4619      	mov	r1, r3
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f7ff ff46 	bl	8000dfa <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff ff89 	bl	8000e86 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40010000 	.word	0x40010000
 8000f84:	40000400 	.word	0x40000400
 8000f88:	40000800 	.word	0x40000800
 8000f8c:	40000c00 	.word	0x40000c00
 8000f90:	40014000 	.word	0x40014000
 8000f94:	40014400 	.word	0x40014400
 8000f98:	40014800 	.word	0x40014800

08000f9c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	2b10      	cmp	r3, #16
 8000fb0:	d012      	beq.n	8000fd8 <LL_TIM_OC_Init+0x3c>
 8000fb2:	2b10      	cmp	r3, #16
 8000fb4:	d802      	bhi.n	8000fbc <LL_TIM_OC_Init+0x20>
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d007      	beq.n	8000fca <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8000fba:	e022      	b.n	8001002 <LL_TIM_OC_Init+0x66>
  switch (Channel)
 8000fbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fc0:	d011      	beq.n	8000fe6 <LL_TIM_OC_Init+0x4a>
 8000fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000fc6:	d015      	beq.n	8000ff4 <LL_TIM_OC_Init+0x58>
      break;
 8000fc8:	e01b      	b.n	8001002 <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	68f8      	ldr	r0, [r7, #12]
 8000fce:	f000 f81d 	bl	800100c <OC1Config>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	75fb      	strb	r3, [r7, #23]
      break;
 8000fd6:	e014      	b.n	8001002 <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8000fd8:	6879      	ldr	r1, [r7, #4]
 8000fda:	68f8      	ldr	r0, [r7, #12]
 8000fdc:	f000 f87c 	bl	80010d8 <OC2Config>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	75fb      	strb	r3, [r7, #23]
      break;
 8000fe4:	e00d      	b.n	8001002 <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8000fe6:	6879      	ldr	r1, [r7, #4]
 8000fe8:	68f8      	ldr	r0, [r7, #12]
 8000fea:	f000 f8df 	bl	80011ac <OC3Config>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	75fb      	strb	r3, [r7, #23]
      break;
 8000ff2:	e006      	b.n	8001002 <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8000ff4:	6879      	ldr	r1, [r7, #4]
 8000ff6:	68f8      	ldr	r0, [r7, #12]
 8000ff8:	f000 f942 	bl	8001280 <OC4Config>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	75fb      	strb	r3, [r7, #23]
      break;
 8001000:	bf00      	nop
  }

  return result;
 8001002:	7dfb      	ldrb	r3, [r7, #23]
}
 8001004:	4618      	mov	r0, r3
 8001006:	3718      	adds	r7, #24
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6a1b      	ldr	r3, [r3, #32]
 800101a:	f023 0201 	bic.w	r2, r3, #1
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a1b      	ldr	r3, [r3, #32]
 8001026:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f023 0303 	bic.w	r3, r3, #3
 800103a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4313      	orrs	r3, r2
 8001048:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	f023 0202 	bic.w	r2, r3, #2
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	691b      	ldr	r3, [r3, #16]
 8001054:	4313      	orrs	r3, r2
 8001056:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	f023 0201 	bic.w	r2, r3, #1
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	4313      	orrs	r3, r2
 8001064:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a1a      	ldr	r2, [pc, #104]	; (80010d4 <OC1Config+0xc8>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d11e      	bne.n	80010ac <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	f023 0208 	bic.w	r2, r3, #8
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	695b      	ldr	r3, [r3, #20]
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	4313      	orrs	r3, r2
 800107c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	f023 0204 	bic.w	r2, r3, #4
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4313      	orrs	r3, r2
 800108c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	4313      	orrs	r3, r2
 800109a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	4313      	orrs	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	68fa      	ldr	r2, [r7, #12]
 80010b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	4619      	mov	r1, r3
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff fea9 	bl	8000e16 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	697a      	ldr	r2, [r7, #20]
 80010c8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40010000 	.word	0x40010000

080010d8 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6a1b      	ldr	r3, [r3, #32]
 80010e6:	f023 0210 	bic.w	r2, r3, #16
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6a1b      	ldr	r3, [r3, #32]
 80010f2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001106:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	021b      	lsls	r3, r3, #8
 8001114:	4313      	orrs	r3, r2
 8001116:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	f023 0220 	bic.w	r2, r3, #32
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	691b      	ldr	r3, [r3, #16]
 8001122:	011b      	lsls	r3, r3, #4
 8001124:	4313      	orrs	r3, r2
 8001126:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	f023 0210 	bic.w	r2, r3, #16
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	011b      	lsls	r3, r3, #4
 8001134:	4313      	orrs	r3, r2
 8001136:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a1b      	ldr	r2, [pc, #108]	; (80011a8 <OC2Config+0xd0>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d11f      	bne.n	8001180 <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	019b      	lsls	r3, r3, #6
 800114c:	4313      	orrs	r3, r2
 800114e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	019b      	lsls	r3, r3, #6
 800115c:	4313      	orrs	r3, r2
 800115e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	699b      	ldr	r3, [r3, #24]
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4313      	orrs	r3, r2
 800116e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	4313      	orrs	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	68fa      	ldr	r2, [r7, #12]
 800118a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	4619      	mov	r1, r3
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff fe4d 	bl	8000e32 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	697a      	ldr	r2, [r7, #20]
 800119c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800119e:	2300      	movs	r3, #0
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40010000 	.word	0x40010000

080011ac <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a1b      	ldr	r3, [r3, #32]
 80011ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6a1b      	ldr	r3, [r3, #32]
 80011c6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	69db      	ldr	r3, [r3, #28]
 80011d2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f023 0303 	bic.w	r3, r3, #3
 80011da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	691b      	ldr	r3, [r3, #16]
 80011f4:	021b      	lsls	r3, r3, #8
 80011f6:	4313      	orrs	r3, r2
 80011f8:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	021b      	lsls	r3, r3, #8
 8001206:	4313      	orrs	r3, r2
 8001208:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a1b      	ldr	r2, [pc, #108]	; (800127c <OC3Config+0xd0>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d11f      	bne.n	8001252 <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	695b      	ldr	r3, [r3, #20]
 800121c:	029b      	lsls	r3, r3, #10
 800121e:	4313      	orrs	r3, r2
 8001220:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	029b      	lsls	r3, r3, #10
 800122e:	4313      	orrs	r3, r2
 8001230:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	011b      	lsls	r3, r3, #4
 800123e:	4313      	orrs	r3, r2
 8001240:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	69db      	ldr	r3, [r3, #28]
 800124c:	015b      	lsls	r3, r3, #5
 800124e:	4313      	orrs	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	4619      	mov	r1, r3
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff fdf2 	bl	8000e4e <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	697a      	ldr	r2, [r7, #20]
 800126e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40010000 	.word	0x40010000

08001280 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a1b      	ldr	r3, [r3, #32]
 800128e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6a1b      	ldr	r3, [r3, #32]
 800129a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	021b      	lsls	r3, r3, #8
 80012bc:	4313      	orrs	r3, r2
 80012be:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	691b      	ldr	r3, [r3, #16]
 80012ca:	031b      	lsls	r3, r3, #12
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	031b      	lsls	r3, r3, #12
 80012dc:	4313      	orrs	r3, r2
 80012de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a0f      	ldr	r2, [pc, #60]	; (8001320 <OC4Config+0xa0>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d107      	bne.n	80012f8 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	019b      	lsls	r3, r3, #6
 80012f4:	4313      	orrs	r3, r2
 80012f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	697a      	ldr	r2, [r7, #20]
 80012fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	68fa      	ldr	r2, [r7, #12]
 8001302:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	4619      	mov	r1, r3
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff fdad 	bl	8000e6a <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	3718      	adds	r7, #24
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40010000 	.word	0x40010000

08001324 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	fbb2 f3f3 	udiv	r3, r2, r3
 8001336:	4a07      	ldr	r2, [pc, #28]	; (8001354 <LL_InitTick+0x30>)
 8001338:	3b01      	subs	r3, #1
 800133a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800133c:	4b05      	ldr	r3, [pc, #20]	; (8001354 <LL_InitTick+0x30>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001342:	4b04      	ldr	r3, [pc, #16]	; (8001354 <LL_InitTick+0x30>)
 8001344:	2205      	movs	r2, #5
 8001346:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000e010 	.word	0xe000e010

08001358 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001360:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff ffdd 	bl	8001324 <LL_InitTick>
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800137c:	4a04      	ldr	r2, [pc, #16]	; (8001390 <LL_SetSystemCoreClock+0x1c>)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6013      	str	r3, [r2, #0]
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	20000004 	.word	0x20000004

08001394 <__libc_init_array>:
 8001394:	b570      	push	{r4, r5, r6, lr}
 8001396:	4e0d      	ldr	r6, [pc, #52]	; (80013cc <__libc_init_array+0x38>)
 8001398:	4c0d      	ldr	r4, [pc, #52]	; (80013d0 <__libc_init_array+0x3c>)
 800139a:	1ba4      	subs	r4, r4, r6
 800139c:	10a4      	asrs	r4, r4, #2
 800139e:	2500      	movs	r5, #0
 80013a0:	42a5      	cmp	r5, r4
 80013a2:	d109      	bne.n	80013b8 <__libc_init_array+0x24>
 80013a4:	4e0b      	ldr	r6, [pc, #44]	; (80013d4 <__libc_init_array+0x40>)
 80013a6:	4c0c      	ldr	r4, [pc, #48]	; (80013d8 <__libc_init_array+0x44>)
 80013a8:	f000 f820 	bl	80013ec <_init>
 80013ac:	1ba4      	subs	r4, r4, r6
 80013ae:	10a4      	asrs	r4, r4, #2
 80013b0:	2500      	movs	r5, #0
 80013b2:	42a5      	cmp	r5, r4
 80013b4:	d105      	bne.n	80013c2 <__libc_init_array+0x2e>
 80013b6:	bd70      	pop	{r4, r5, r6, pc}
 80013b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013bc:	4798      	blx	r3
 80013be:	3501      	adds	r5, #1
 80013c0:	e7ee      	b.n	80013a0 <__libc_init_array+0xc>
 80013c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013c6:	4798      	blx	r3
 80013c8:	3501      	adds	r5, #1
 80013ca:	e7f2      	b.n	80013b2 <__libc_init_array+0x1e>
 80013cc:	08001414 	.word	0x08001414
 80013d0:	08001414 	.word	0x08001414
 80013d4:	08001414 	.word	0x08001414
 80013d8:	08001418 	.word	0x08001418

080013dc <memset>:
 80013dc:	4402      	add	r2, r0
 80013de:	4603      	mov	r3, r0
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d100      	bne.n	80013e6 <memset+0xa>
 80013e4:	4770      	bx	lr
 80013e6:	f803 1b01 	strb.w	r1, [r3], #1
 80013ea:	e7f9      	b.n	80013e0 <memset+0x4>

080013ec <_init>:
 80013ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ee:	bf00      	nop
 80013f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013f2:	bc08      	pop	{r3}
 80013f4:	469e      	mov	lr, r3
 80013f6:	4770      	bx	lr

080013f8 <_fini>:
 80013f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013fa:	bf00      	nop
 80013fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013fe:	bc08      	pop	{r3}
 8001400:	469e      	mov	lr, r3
 8001402:	4770      	bx	lr
