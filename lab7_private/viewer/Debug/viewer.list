
viewer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029c8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08002b5c  08002b5c  00012b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ba0  08002ba0  00020004  2**0
                  CONTENTS
  4 .ARM          00000008  08002ba0  08002ba0  00012ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ba8  08002ba8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ba8  08002ba8  00012ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bac  08002bac  00012bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002bb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000004  08002bb4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08002bb4  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006219  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001129  00000000  00000000  0002624d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007f0  00000000  00000000  00027378  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000758  00000000  00000000  00027b68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000118b7  00000000  00000000  000282c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000432a  00000000  00000000  00039b77  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00068fd3  00000000  00000000  0003dea1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a6e74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002188  00000000  00000000  000a6ef0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002b44 	.word	0x08002b44

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08002b44 	.word	0x08002b44

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b972 	b.w	80004d0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	4688      	mov	r8, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0803 	orr.w	r8, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbb8 f7fe 	udiv	r7, r8, lr
 800023c:	fa1f fc85 	uxth.w	ip, r5
 8000240:	fb0e 8817 	mls	r8, lr, r7, r8
 8000244:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000248:	fb07 f10c 	mul.w	r1, r7, ip
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 30ff 	add.w	r0, r7, #4294967295
 8000256:	f080 811b 	bcs.w	8000490 <__udivmoddi4+0x28c>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8118 	bls.w	8000490 <__udivmoddi4+0x28c>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fc0c 	mul.w	ip, r0, ip
 8000278:	45a4      	cmp	ip, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	192c      	adds	r4, r5, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x290>
 8000286:	45a4      	cmp	ip, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x290>
 800028c:	3802      	subs	r0, #2
 800028e:	442c      	add	r4, r5
 8000290:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000294:	eba4 040c 	sub.w	r4, r4, ip
 8000298:	2700      	movs	r7, #0
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80eb 	beq.w	800048a <__udivmoddi4+0x286>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d147      	bne.n	800035a <__udivmoddi4+0x156>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2c4>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	4698      	mov	r8, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4800 	strd	r4, r8, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	1b49      	subs	r1, r1, r5
 80002f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002fc:	fa1f f885 	uxth.w	r8, r5
 8000300:	2701      	movs	r7, #1
 8000302:	fbb1 fcfe 	udiv	ip, r1, lr
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fb0e 111c 	mls	r1, lr, ip, r1
 800030c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000310:	fb08 f10c 	mul.w	r1, r8, ip
 8000314:	4299      	cmp	r1, r3
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x124>
 8000318:	18eb      	adds	r3, r5, r3
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4299      	cmp	r1, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 8000326:	4684      	mov	ip, r0
 8000328:	1a59      	subs	r1, r3, r1
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1410 	mls	r4, lr, r0, r1
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x14c>
 8000340:	192c      	adds	r4, r5, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x14a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80b6 	bhi.w	80004ba <__udivmoddi4+0x2b6>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e79f      	b.n	800029a <__udivmoddi4+0x96>
 800035a:	f1c7 0c20 	rsb	ip, r7, #32
 800035e:	40bb      	lsls	r3, r7
 8000360:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000364:	ea4e 0e03 	orr.w	lr, lr, r3
 8000368:	fa01 f407 	lsl.w	r4, r1, r7
 800036c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000370:	fa21 f30c 	lsr.w	r3, r1, ip
 8000374:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000378:	4325      	orrs	r5, r4
 800037a:	fbb3 f9f8 	udiv	r9, r3, r8
 800037e:	0c2c      	lsrs	r4, r5, #16
 8000380:	fb08 3319 	mls	r3, r8, r9, r3
 8000384:	fa1f fa8e 	uxth.w	sl, lr
 8000388:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800038c:	fb09 f40a 	mul.w	r4, r9, sl
 8000390:	429c      	cmp	r4, r3
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f107 	lsl.w	r1, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1e 0303 	adds.w	r3, lr, r3
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a4:	f080 8087 	bcs.w	80004b6 <__udivmoddi4+0x2b2>
 80003a8:	429c      	cmp	r4, r3
 80003aa:	f240 8084 	bls.w	80004b6 <__udivmoddi4+0x2b2>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4473      	add	r3, lr
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	b2ad      	uxth	r5, r5
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1e 0404 	adds.w	r4, lr, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	d26b      	bcs.n	80004ae <__udivmoddi4+0x2aa>
 80003d6:	45a2      	cmp	sl, r4
 80003d8:	d969      	bls.n	80004ae <__udivmoddi4+0x2aa>
 80003da:	3802      	subs	r0, #2
 80003dc:	4474      	add	r4, lr
 80003de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e2:	fba0 8902 	umull	r8, r9, r0, r2
 80003e6:	eba4 040a 	sub.w	r4, r4, sl
 80003ea:	454c      	cmp	r4, r9
 80003ec:	46c2      	mov	sl, r8
 80003ee:	464b      	mov	r3, r9
 80003f0:	d354      	bcc.n	800049c <__udivmoddi4+0x298>
 80003f2:	d051      	beq.n	8000498 <__udivmoddi4+0x294>
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d069      	beq.n	80004cc <__udivmoddi4+0x2c8>
 80003f8:	ebb1 050a 	subs.w	r5, r1, sl
 80003fc:	eb64 0403 	sbc.w	r4, r4, r3
 8000400:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000404:	40fd      	lsrs	r5, r7
 8000406:	40fc      	lsrs	r4, r7
 8000408:	ea4c 0505 	orr.w	r5, ip, r5
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f703 	lsr.w	r7, r0, r3
 800041c:	4095      	lsls	r5, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	fa21 f303 	lsr.w	r3, r1, r3
 8000426:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042a:	4338      	orrs	r0, r7
 800042c:	0c01      	lsrs	r1, r0, #16
 800042e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000432:	fa1f f885 	uxth.w	r8, r5
 8000436:	fb0e 3317 	mls	r3, lr, r7, r3
 800043a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043e:	fb07 f308 	mul.w	r3, r7, r8
 8000442:	428b      	cmp	r3, r1
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x256>
 800044a:	1869      	adds	r1, r5, r1
 800044c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000450:	d22f      	bcs.n	80004b2 <__udivmoddi4+0x2ae>
 8000452:	428b      	cmp	r3, r1
 8000454:	d92d      	bls.n	80004b2 <__udivmoddi4+0x2ae>
 8000456:	3f02      	subs	r7, #2
 8000458:	4429      	add	r1, r5
 800045a:	1acb      	subs	r3, r1, r3
 800045c:	b281      	uxth	r1, r0
 800045e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000462:	fb0e 3310 	mls	r3, lr, r0, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb00 f308 	mul.w	r3, r0, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 3cff 	add.w	ip, r0, #4294967295
 8000478:	d217      	bcs.n	80004aa <__udivmoddi4+0x2a6>
 800047a:	428b      	cmp	r3, r1
 800047c:	d915      	bls.n	80004aa <__udivmoddi4+0x2a6>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000488:	e73b      	b.n	8000302 <__udivmoddi4+0xfe>
 800048a:	4637      	mov	r7, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e709      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000490:	4607      	mov	r7, r0
 8000492:	e6e7      	b.n	8000264 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x8c>
 8000498:	4541      	cmp	r1, r8
 800049a:	d2ab      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 800049c:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a0:	eb69 020e 	sbc.w	r2, r9, lr
 80004a4:	3801      	subs	r0, #1
 80004a6:	4613      	mov	r3, r2
 80004a8:	e7a4      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004aa:	4660      	mov	r0, ip
 80004ac:	e7e9      	b.n	8000482 <__udivmoddi4+0x27e>
 80004ae:	4618      	mov	r0, r3
 80004b0:	e795      	b.n	80003de <__udivmoddi4+0x1da>
 80004b2:	4667      	mov	r7, ip
 80004b4:	e7d1      	b.n	800045a <__udivmoddi4+0x256>
 80004b6:	4681      	mov	r9, r0
 80004b8:	e77c      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004ba:	3802      	subs	r0, #2
 80004bc:	442c      	add	r4, r5
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0x14c>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	442b      	add	r3, r5
 80004c6:	e72f      	b.n	8000328 <__udivmoddi4+0x124>
 80004c8:	4638      	mov	r0, r7
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xda>
 80004cc:	4637      	mov	r7, r6
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0xa0>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	f003 0307 	and.w	r3, r3, #7
 80004e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004e4:	4b0c      	ldr	r3, [pc, #48]	; (8000518 <__NVIC_SetPriorityGrouping+0x44>)
 80004e6:	68db      	ldr	r3, [r3, #12]
 80004e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80004ea:	68ba      	ldr	r2, [r7, #8]
 80004ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80004f0:	4013      	ands	r3, r2
 80004f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80004f8:	68bb      	ldr	r3, [r7, #8]
 80004fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80004fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000506:	4a04      	ldr	r2, [pc, #16]	; (8000518 <__NVIC_SetPriorityGrouping+0x44>)
 8000508:	68bb      	ldr	r3, [r7, #8]
 800050a:	60d3      	str	r3, [r2, #12]
}
 800050c:	bf00      	nop
 800050e:	3714      	adds	r7, #20
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr
 8000518:	e000ed00 	.word	0xe000ed00

0800051c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000520:	4b04      	ldr	r3, [pc, #16]	; (8000534 <__NVIC_GetPriorityGrouping+0x18>)
 8000522:	68db      	ldr	r3, [r3, #12]
 8000524:	0a1b      	lsrs	r3, r3, #8
 8000526:	f003 0307 	and.w	r3, r3, #7
}
 800052a:	4618      	mov	r0, r3
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr
 8000534:	e000ed00 	.word	0xe000ed00

08000538 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000546:	2b00      	cmp	r3, #0
 8000548:	db0b      	blt.n	8000562 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	f003 021f 	and.w	r2, r3, #31
 8000550:	4907      	ldr	r1, [pc, #28]	; (8000570 <__NVIC_EnableIRQ+0x38>)
 8000552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000556:	095b      	lsrs	r3, r3, #5
 8000558:	2001      	movs	r0, #1
 800055a:	fa00 f202 	lsl.w	r2, r0, r2
 800055e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000562:	bf00      	nop
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	e000e100 	.word	0xe000e100

08000574 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	6039      	str	r1, [r7, #0]
 800057e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000584:	2b00      	cmp	r3, #0
 8000586:	db0a      	blt.n	800059e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	b2da      	uxtb	r2, r3
 800058c:	490c      	ldr	r1, [pc, #48]	; (80005c0 <__NVIC_SetPriority+0x4c>)
 800058e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000592:	0112      	lsls	r2, r2, #4
 8000594:	b2d2      	uxtb	r2, r2
 8000596:	440b      	add	r3, r1
 8000598:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800059c:	e00a      	b.n	80005b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	b2da      	uxtb	r2, r3
 80005a2:	4908      	ldr	r1, [pc, #32]	; (80005c4 <__NVIC_SetPriority+0x50>)
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	f003 030f 	and.w	r3, r3, #15
 80005aa:	3b04      	subs	r3, #4
 80005ac:	0112      	lsls	r2, r2, #4
 80005ae:	b2d2      	uxtb	r2, r2
 80005b0:	440b      	add	r3, r1
 80005b2:	761a      	strb	r2, [r3, #24]
}
 80005b4:	bf00      	nop
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	e000e100 	.word	0xe000e100
 80005c4:	e000ed00 	.word	0xe000ed00

080005c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b089      	sub	sp, #36	; 0x24
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	f003 0307 	and.w	r3, r3, #7
 80005da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005dc:	69fb      	ldr	r3, [r7, #28]
 80005de:	f1c3 0307 	rsb	r3, r3, #7
 80005e2:	2b04      	cmp	r3, #4
 80005e4:	bf28      	it	cs
 80005e6:	2304      	movcs	r3, #4
 80005e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ea:	69fb      	ldr	r3, [r7, #28]
 80005ec:	3304      	adds	r3, #4
 80005ee:	2b06      	cmp	r3, #6
 80005f0:	d902      	bls.n	80005f8 <NVIC_EncodePriority+0x30>
 80005f2:	69fb      	ldr	r3, [r7, #28]
 80005f4:	3b03      	subs	r3, #3
 80005f6:	e000      	b.n	80005fa <NVIC_EncodePriority+0x32>
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000600:	69bb      	ldr	r3, [r7, #24]
 8000602:	fa02 f303 	lsl.w	r3, r2, r3
 8000606:	43da      	mvns	r2, r3
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	401a      	ands	r2, r3
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000610:	f04f 31ff 	mov.w	r1, #4294967295
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	fa01 f303 	lsl.w	r3, r1, r3
 800061a:	43d9      	mvns	r1, r3
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000620:	4313      	orrs	r3, r2
         );
}
 8000622:	4618      	mov	r0, r3
 8000624:	3724      	adds	r7, #36	; 0x24
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On STM32F4, parameter available only on ADC instance: ADC1.\n
  *         (2) On devices STM32F42x and STM32F43x, limitation: this internal channel is shared between temperature sensor and Vbat, only 1 measurement path must be enabled.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800062e:	b490      	push	{r4, r7}
 8000630:	b086      	sub	sp, #24
 8000632:	af00      	add	r7, sp, #0
 8000634:	60f8      	str	r0, [r7, #12]
 8000636:	60b9      	str	r1, [r7, #8]
 8000638:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	332c      	adds	r3, #44	; 0x2c
 800063e:	4619      	mov	r1, r3
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000646:	f44f 7240 	mov.w	r2, #768	; 0x300
 800064a:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800064c:	697a      	ldr	r2, [r7, #20]
 800064e:	fa92 f2a2 	rbit	r2, r2
 8000652:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000654:	693a      	ldr	r2, [r7, #16]
 8000656:	fab2 f282 	clz	r2, r2
 800065a:	b2d2      	uxtb	r2, r2
 800065c:	40d3      	lsrs	r3, r2
 800065e:	009b      	lsls	r3, r3, #2
 8000660:	440b      	add	r3, r1
 8000662:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 8000664:	6822      	ldr	r2, [r4, #0]
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	f003 031f 	and.w	r3, r3, #31
 800066c:	211f      	movs	r1, #31
 800066e:	fa01 f303 	lsl.w	r3, r1, r3
 8000672:	43db      	mvns	r3, r3
 8000674:	401a      	ands	r2, r3
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f003 011f 	and.w	r1, r3, #31
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	f003 031f 	and.w	r3, r3, #31
 8000682:	fa01 f303 	lsl.w	r3, r1, r3
 8000686:	4313      	orrs	r3, r2
 8000688:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800068a:	bf00      	nop
 800068c:	3718      	adds	r7, #24
 800068e:	46bd      	mov	sp, r7
 8000690:	bc90      	pop	{r4, r7}
 8000692:	4770      	bx	lr

08000694 <LL_ADC_REG_SetFlagEndOfConversion>:
  *         @arg @ref LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV
  *         @arg @ref LL_ADC_REG_FLAG_EOC_UNITARY_CONV
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetFlagEndOfConversion(ADC_TypeDef *ADCx, uint32_t EocSelection)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	689b      	ldr	r3, [r3, #8]
 80006a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	431a      	orrs	r2, r3
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	609a      	str	r2, [r3, #8]
}
 80006ae:	bf00      	nop
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr

080006ba <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_144CYCLES
  *         @arg @ref LL_ADC_SAMPLINGTIME_480CYCLES
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80006ba:	b490      	push	{r4, r7}
 80006bc:	b08a      	sub	sp, #40	; 0x28
 80006be:	af00      	add	r7, sp, #0
 80006c0:	60f8      	str	r0, [r7, #12]
 80006c2:	60b9      	str	r1, [r7, #8]
 80006c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	330c      	adds	r3, #12
 80006ca:	4619      	mov	r1, r3
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80006d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006d8:	697a      	ldr	r2, [r7, #20]
 80006da:	fa92 f2a2 	rbit	r2, r2
 80006de:	613a      	str	r2, [r7, #16]
  return result;
 80006e0:	693a      	ldr	r2, [r7, #16]
 80006e2:	fab2 f282 	clz	r2, r2
 80006e6:	b2d2      	uxtb	r2, r2
 80006e8:	40d3      	lsrs	r3, r2
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	440b      	add	r3, r1
 80006ee:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 80006f0:	6822      	ldr	r2, [r4, #0]
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80006f8:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80006fc:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006fe:	69f9      	ldr	r1, [r7, #28]
 8000700:	fa91 f1a1 	rbit	r1, r1
 8000704:	61b9      	str	r1, [r7, #24]
  return result;
 8000706:	69b9      	ldr	r1, [r7, #24]
 8000708:	fab1 f181 	clz	r1, r1
 800070c:	b2c9      	uxtb	r1, r1
 800070e:	40cb      	lsrs	r3, r1
 8000710:	2107      	movs	r1, #7
 8000712:	fa01 f303 	lsl.w	r3, r1, r3
 8000716:	43db      	mvns	r3, r3
 8000718:	401a      	ands	r2, r3
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8000720:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8000724:	6279      	str	r1, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000726:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000728:	fa91 f1a1 	rbit	r1, r1
 800072c:	6239      	str	r1, [r7, #32]
  return result;
 800072e:	6a39      	ldr	r1, [r7, #32]
 8000730:	fab1 f181 	clz	r1, r1
 8000734:	b2c9      	uxtb	r1, r1
 8000736:	40cb      	lsrs	r3, r1
 8000738:	6879      	ldr	r1, [r7, #4]
 800073a:	fa01 f303 	lsl.w	r3, r1, r3
 800073e:	4313      	orrs	r3, r2
 8000740:	6023      	str	r3, [r4, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8000742:	bf00      	nop
 8000744:	3728      	adds	r7, #40	; 0x28
 8000746:	46bd      	mov	sp, r7
 8000748:	bc90      	pop	{r4, r7}
 800074a:	4770      	bx	lr

0800074c <LL_ADC_REG_StartConversionExtTrig>:
  *         @arg @ref LL_ADC_REG_TRIG_EXT_RISINGFALLING
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionExtTrig(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	689a      	ldr	r2, [r3, #8]
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	431a      	orrs	r2, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	609a      	str	r2, [r3, #8]
}
 8000762:	bf00      	nop
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr

0800076e <LL_ADC_DisableIT_EOCS>:
  * @rmtoll CR1      EOCIE          LL_ADC_DisableIT_EOCS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
 800076e:	b480      	push	{r7}
 8000770:	b083      	sub	sp, #12
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	f023 0220 	bic.w	r2, r3, #32
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	605a      	str	r2, [r3, #4]
}
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
	...

08000790 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 800079a:	4a0c      	ldr	r2, [pc, #48]	; (80007cc <LL_DMA_EnableStream+0x3c>)
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	4413      	add	r3, r2
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	461a      	mov	r2, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4413      	add	r3, r2
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4908      	ldr	r1, [pc, #32]	; (80007cc <LL_DMA_EnableStream+0x3c>)
 80007ac:	683a      	ldr	r2, [r7, #0]
 80007ae:	440a      	add	r2, r1
 80007b0:	7812      	ldrb	r2, [r2, #0]
 80007b2:	4611      	mov	r1, r2
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	440a      	add	r2, r1
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6013      	str	r3, [r2, #0]
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	08002b5c 	.word	0x08002b5c

080007d0 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	60f8      	str	r0, [r7, #12]
 80007d8:	60b9      	str	r1, [r7, #8]
 80007da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 80007dc:	4a0d      	ldr	r2, [pc, #52]	; (8000814 <LL_DMA_SetDataTransferDirection+0x44>)
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	4413      	add	r3, r2
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	461a      	mov	r2, r3
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	4413      	add	r3, r2
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80007f0:	4908      	ldr	r1, [pc, #32]	; (8000814 <LL_DMA_SetDataTransferDirection+0x44>)
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	440b      	add	r3, r1
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	4619      	mov	r1, r3
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	440b      	add	r3, r1
 80007fe:	4619      	mov	r1, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4313      	orrs	r3, r2
 8000804:	600b      	str	r3, [r1, #0]
}
 8000806:	bf00      	nop
 8000808:	3714      	adds	r7, #20
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	08002b5c 	.word	0x08002b5c

08000818 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 8000818:	b480      	push	{r7}
 800081a:	b085      	sub	sp, #20
 800081c:	af00      	add	r7, sp, #0
 800081e:	60f8      	str	r0, [r7, #12]
 8000820:	60b9      	str	r1, [r7, #8]
 8000822:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8000824:	4a0d      	ldr	r2, [pc, #52]	; (800085c <LL_DMA_SetMode+0x44>)
 8000826:	68bb      	ldr	r3, [r7, #8]
 8000828:	4413      	add	r3, r2
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	461a      	mov	r2, r3
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	4413      	add	r3, r2
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8000838:	4908      	ldr	r1, [pc, #32]	; (800085c <LL_DMA_SetMode+0x44>)
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	440b      	add	r3, r1
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	4619      	mov	r1, r3
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	440b      	add	r3, r1
 8000846:	4619      	mov	r1, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4313      	orrs	r3, r2
 800084c:	600b      	str	r3, [r1, #0]
}
 800084e:	bf00      	nop
 8000850:	3714      	adds	r7, #20
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	08002b5c 	.word	0x08002b5c

08000860 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 800086c:	4a0d      	ldr	r2, [pc, #52]	; (80008a4 <LL_DMA_SetPeriphIncMode+0x44>)
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	4413      	add	r3, r2
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	461a      	mov	r2, r3
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	4413      	add	r3, r2
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000880:	4908      	ldr	r1, [pc, #32]	; (80008a4 <LL_DMA_SetPeriphIncMode+0x44>)
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	440b      	add	r3, r1
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	4619      	mov	r1, r3
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	440b      	add	r3, r1
 800088e:	4619      	mov	r1, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	4313      	orrs	r3, r2
 8000894:	600b      	str	r3, [r1, #0]
}
 8000896:	bf00      	nop
 8000898:	3714      	adds	r7, #20
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	08002b5c 	.word	0x08002b5c

080008a8 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	60f8      	str	r0, [r7, #12]
 80008b0:	60b9      	str	r1, [r7, #8]
 80008b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 80008b4:	4a0d      	ldr	r2, [pc, #52]	; (80008ec <LL_DMA_SetMemoryIncMode+0x44>)
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	4413      	add	r3, r2
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	461a      	mov	r2, r3
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	4413      	add	r3, r2
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80008c8:	4908      	ldr	r1, [pc, #32]	; (80008ec <LL_DMA_SetMemoryIncMode+0x44>)
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	440b      	add	r3, r1
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	4619      	mov	r1, r3
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	440b      	add	r3, r1
 80008d6:	4619      	mov	r1, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4313      	orrs	r3, r2
 80008dc:	600b      	str	r3, [r1, #0]
}
 80008de:	bf00      	nop
 80008e0:	3714      	adds	r7, #20
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	08002b5c 	.word	0x08002b5c

080008f0 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 80008fc:	4a0d      	ldr	r2, [pc, #52]	; (8000934 <LL_DMA_SetPeriphSize+0x44>)
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	4413      	add	r3, r2
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	461a      	mov	r2, r3
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	4413      	add	r3, r2
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8000910:	4908      	ldr	r1, [pc, #32]	; (8000934 <LL_DMA_SetPeriphSize+0x44>)
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	440b      	add	r3, r1
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	4619      	mov	r1, r3
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	440b      	add	r3, r1
 800091e:	4619      	mov	r1, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4313      	orrs	r3, r2
 8000924:	600b      	str	r3, [r1, #0]
}
 8000926:	bf00      	nop
 8000928:	3714      	adds	r7, #20
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	08002b5c 	.word	0x08002b5c

08000938 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8000944:	4a0d      	ldr	r2, [pc, #52]	; (800097c <LL_DMA_SetMemorySize+0x44>)
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	4413      	add	r3, r2
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	461a      	mov	r2, r3
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	4413      	add	r3, r2
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8000958:	4908      	ldr	r1, [pc, #32]	; (800097c <LL_DMA_SetMemorySize+0x44>)
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	440b      	add	r3, r1
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	4619      	mov	r1, r3
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	440b      	add	r3, r1
 8000966:	4619      	mov	r1, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4313      	orrs	r3, r2
 800096c:	600b      	str	r3, [r1, #0]
}
 800096e:	bf00      	nop
 8000970:	3714      	adds	r7, #20
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	08002b5c 	.word	0x08002b5c

08000980 <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 8000980:	b480      	push	{r7}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 800098c:	4a0d      	ldr	r2, [pc, #52]	; (80009c4 <LL_DMA_SetStreamPriorityLevel+0x44>)
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	4413      	add	r3, r2
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	461a      	mov	r2, r3
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	4413      	add	r3, r2
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80009a0:	4908      	ldr	r1, [pc, #32]	; (80009c4 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	440b      	add	r3, r1
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	4619      	mov	r1, r3
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	440b      	add	r3, r1
 80009ae:	4619      	mov	r1, r3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4313      	orrs	r3, r2
 80009b4:	600b      	str	r3, [r1, #0]
}
 80009b6:	bf00      	nop
 80009b8:	3714      	adds	r7, #20
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	08002b5c 	.word	0x08002b5c

080009c8 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 80009d4:	4a0d      	ldr	r2, [pc, #52]	; (8000a0c <LL_DMA_SetDataLength+0x44>)
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	4413      	add	r3, r2
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	461a      	mov	r2, r3
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	4413      	add	r3, r2
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	0c1b      	lsrs	r3, r3, #16
 80009e6:	041b      	lsls	r3, r3, #16
 80009e8:	4908      	ldr	r1, [pc, #32]	; (8000a0c <LL_DMA_SetDataLength+0x44>)
 80009ea:	68ba      	ldr	r2, [r7, #8]
 80009ec:	440a      	add	r2, r1
 80009ee:	7812      	ldrb	r2, [r2, #0]
 80009f0:	4611      	mov	r1, r2
 80009f2:	68fa      	ldr	r2, [r7, #12]
 80009f4:	440a      	add	r2, r1
 80009f6:	4611      	mov	r1, r2
 80009f8:	687a      	ldr	r2, [r7, #4]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	604b      	str	r3, [r1, #4]
}
 80009fe:	bf00      	nop
 8000a00:	3714      	adds	r7, #20
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	08002b5c 	.word	0x08002b5c

08000a10 <LL_DMA_SetChannelSelection>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8000a1c:	4a0d      	ldr	r2, [pc, #52]	; (8000a54 <LL_DMA_SetChannelSelection+0x44>)
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	4413      	add	r3, r2
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	461a      	mov	r2, r3
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	4413      	add	r3, r2
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8000a30:	4908      	ldr	r1, [pc, #32]	; (8000a54 <LL_DMA_SetChannelSelection+0x44>)
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	440b      	add	r3, r1
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	4619      	mov	r1, r3
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	440b      	add	r3, r1
 8000a3e:	4619      	mov	r1, r3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4313      	orrs	r3, r2
 8000a44:	600b      	str	r3, [r1, #0]
}
 8000a46:	bf00      	nop
 8000a48:	3714      	adds	r7, #20
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	08002b5c 	.word	0x08002b5c

08000a58 <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8000a62:	4a0c      	ldr	r2, [pc, #48]	; (8000a94 <LL_DMA_DisableFifoMode+0x3c>)
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	4413      	add	r3, r2
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	4413      	add	r3, r2
 8000a70:	695b      	ldr	r3, [r3, #20]
 8000a72:	4908      	ldr	r1, [pc, #32]	; (8000a94 <LL_DMA_DisableFifoMode+0x3c>)
 8000a74:	683a      	ldr	r2, [r7, #0]
 8000a76:	440a      	add	r2, r1
 8000a78:	7812      	ldrb	r2, [r2, #0]
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	440a      	add	r2, r1
 8000a80:	f023 0304 	bic.w	r3, r3, #4
 8000a84:	6153      	str	r3, [r2, #20]
}
 8000a86:	bf00      	nop
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	08002b5c 	.word	0x08002b5c

08000a98 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8000aa4:	4a07      	ldr	r2, [pc, #28]	; (8000ac4 <LL_DMA_SetMemoryAddress+0x2c>)
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	461a      	mov	r2, r3
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	60d3      	str	r3, [r2, #12]
}
 8000ab8:	bf00      	nop
 8000aba:	3714      	adds	r7, #20
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	08002b5c 	.word	0x08002b5c

08000ac8 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8000ad4:	4a07      	ldr	r2, [pc, #28]	; (8000af4 <LL_DMA_SetPeriphAddress+0x2c>)
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	4413      	add	r3, r2
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	461a      	mov	r2, r3
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6093      	str	r3, [r2, #8]
}
 8000ae8:	bf00      	nop
 8000aea:	3714      	adds	r7, #20
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	08002b5c 	.word	0x08002b5c

08000af8 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8000b02:	4a0c      	ldr	r2, [pc, #48]	; (8000b34 <LL_DMA_EnableIT_TC+0x3c>)
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	4413      	add	r3, r2
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4413      	add	r3, r2
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4908      	ldr	r1, [pc, #32]	; (8000b34 <LL_DMA_EnableIT_TC+0x3c>)
 8000b14:	683a      	ldr	r2, [r7, #0]
 8000b16:	440a      	add	r2, r1
 8000b18:	7812      	ldrb	r2, [r2, #0]
 8000b1a:	4611      	mov	r1, r2
 8000b1c:	687a      	ldr	r2, [r7, #4]
 8000b1e:	440a      	add	r2, r1
 8000b20:	f043 0310 	orr.w	r3, r3, #16
 8000b24:	6013      	str	r3, [r2, #0]
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	08002b5c 	.word	0x08002b5c

08000b38 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <LL_RCC_HSI_Enable+0x1c>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a04      	ldr	r2, [pc, #16]	; (8000b54 <LL_RCC_HSI_Enable+0x1c>)
 8000b42:	f043 0301 	orr.w	r3, r3, #1
 8000b46:	6013      	str	r3, [r2, #0]
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	40023800 	.word	0x40023800

08000b58 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <LL_RCC_HSI_IsReady+0x20>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f003 0302 	and.w	r3, r3, #2
 8000b64:	2b02      	cmp	r3, #2
 8000b66:	bf0c      	ite	eq
 8000b68:	2301      	moveq	r3, #1
 8000b6a:	2300      	movne	r3, #0
 8000b6c:	b2db      	uxtb	r3, r3
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	40023800 	.word	0x40023800

08000b7c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000b84:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	00db      	lsls	r3, r3, #3
 8000b90:	4904      	ldr	r1, [pc, #16]	; (8000ba4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000b92:	4313      	orrs	r3, r2
 8000b94:	600b      	str	r3, [r1, #0]
}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	40023800 	.word	0x40023800

08000ba8 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <LL_RCC_SetSysClkSource+0x24>)
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	f023 0203 	bic.w	r2, r3, #3
 8000bb8:	4904      	ldr	r1, [pc, #16]	; (8000bcc <LL_RCC_SetSysClkSource+0x24>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	608b      	str	r3, [r1, #8]
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	40023800 	.word	0x40023800

08000bd0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000bd4:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <LL_RCC_GetSysClkSource+0x18>)
 8000bd6:	689b      	ldr	r3, [r3, #8]
 8000bd8:	f003 030c 	and.w	r3, r3, #12
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	40023800 	.word	0x40023800

08000bec <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <LL_RCC_SetAHBPrescaler+0x24>)
 8000bf6:	689b      	ldr	r3, [r3, #8]
 8000bf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000bfc:	4904      	ldr	r1, [pc, #16]	; (8000c10 <LL_RCC_SetAHBPrescaler+0x24>)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	608b      	str	r3, [r1, #8]
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	40023800 	.word	0x40023800

08000c14 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000c1c:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000c24:	4904      	ldr	r1, [pc, #16]	; (8000c38 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	608b      	str	r3, [r1, #8]
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	40023800 	.word	0x40023800

08000c3c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000c4c:	4904      	ldr	r1, [pc, #16]	; (8000c60 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	608b      	str	r3, [r1, #8]
}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	40023800 	.word	0x40023800

08000c64 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8000c6c:	4b07      	ldr	r3, [pc, #28]	; (8000c8c <LL_RCC_SetTIMPrescaler+0x28>)
 8000c6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c72:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000c76:	4905      	ldr	r1, [pc, #20]	; (8000c8c <LL_RCC_SetTIMPrescaler+0x28>)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	40023800 	.word	0x40023800

08000c90 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000c94:	4b05      	ldr	r3, [pc, #20]	; (8000cac <LL_RCC_PLL_Enable+0x1c>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a04      	ldr	r2, [pc, #16]	; (8000cac <LL_RCC_PLL_Enable+0x1c>)
 8000c9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c9e:	6013      	str	r3, [r2, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	40023800 	.word	0x40023800

08000cb0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000cb4:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <LL_RCC_PLL_IsReady+0x24>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cbc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000cc0:	bf0c      	ite	eq
 8000cc2:	2301      	moveq	r3, #1
 8000cc4:	2300      	movne	r3, #0
 8000cc6:	b2db      	uxtb	r3, r3
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	40023800 	.word	0x40023800

08000cd8 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
 8000ce4:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000ce6:	4b0d      	ldr	r3, [pc, #52]	; (8000d1c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000ce8:	685a      	ldr	r2, [r3, #4]
 8000cea:	4b0d      	ldr	r3, [pc, #52]	; (8000d20 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8000cec:	4013      	ands	r3, r2
 8000cee:	68f9      	ldr	r1, [r7, #12]
 8000cf0:	68ba      	ldr	r2, [r7, #8]
 8000cf2:	4311      	orrs	r1, r2
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	0192      	lsls	r2, r2, #6
 8000cf8:	430a      	orrs	r2, r1
 8000cfa:	4908      	ldr	r1, [pc, #32]	; (8000d1c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000d08:	4904      	ldr	r1, [pc, #16]	; (8000d1c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8000d10:	bf00      	nop
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	ffbf8000 	.word	0xffbf8000

08000d24 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000d2c:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d30:	4907      	ldr	r1, [pc, #28]	; (8000d50 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4013      	ands	r3, r2
 8000d40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d42:	68fb      	ldr	r3, [r7, #12]
}
 8000d44:	bf00      	nop
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	40023800 	.word	0x40023800

08000d54 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000d5c:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d60:	4907      	ldr	r1, [pc, #28]	; (8000d80 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000d68:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d72:	68fb      	ldr	r3, [r7, #12]
}
 8000d74:	bf00      	nop
 8000d76:	3714      	adds	r7, #20
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	40023800 	.word	0x40023800

08000d84 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000d8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d90:	4907      	ldr	r1, [pc, #28]	; (8000db0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d98:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000d9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000da2:	68fb      	ldr	r3, [r7, #12]
}
 8000da4:	bf00      	nop
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	40023800 	.word	0x40023800

08000db4 <LL_DBGMCU_APB1_GRP1_FreezePeriph>:
  *         
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB1_GRP1_FreezePeriph(uint32_t Periphs)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  SET_BIT(DBGMCU->APB1FZ, Periphs);
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <LL_DBGMCU_APB1_GRP1_FreezePeriph+0x20>)
 8000dbe:	689a      	ldr	r2, [r3, #8]
 8000dc0:	4904      	ldr	r1, [pc, #16]	; (8000dd4 <LL_DBGMCU_APB1_GRP1_FreezePeriph+0x20>)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	608b      	str	r3, [r1, #8]
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e0042000 	.word	0xe0042000

08000dd8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <LL_FLASH_SetLatency+0x24>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f023 020f 	bic.w	r2, r3, #15
 8000de8:	4904      	ldr	r1, [pc, #16]	; (8000dfc <LL_FLASH_SetLatency+0x24>)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	600b      	str	r3, [r1, #0]
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	40023c00 	.word	0x40023c00

08000e00 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000e04:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <LL_FLASH_GetLatency+0x18>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f003 030f 	and.w	r3, r3, #15
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	40023c00 	.word	0x40023c00

08000e1c <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2b04      	cmp	r3, #4
 8000e28:	d106      	bne.n	8000e38 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8000e2a:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <LL_SYSTICK_SetClkSource+0x34>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a08      	ldr	r2, [pc, #32]	; (8000e50 <LL_SYSTICK_SetClkSource+0x34>)
 8000e30:	f043 0304 	orr.w	r3, r3, #4
 8000e34:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8000e36:	e005      	b.n	8000e44 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <LL_SYSTICK_SetClkSource+0x34>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a04      	ldr	r2, [pc, #16]	; (8000e50 <LL_SYSTICK_SetClkSource+0x34>)
 8000e3e:	f023 0304 	bic.w	r3, r3, #4
 8000e42:	6013      	str	r3, [r2, #0]
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000e010 	.word	0xe000e010

08000e54 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8000e64:	4904      	ldr	r1, [pc, #16]	; (8000e78 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	600b      	str	r3, [r1, #0]
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	40007000 	.word	0x40007000

08000e7c <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	601a      	str	r2, [r3, #0]
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000e9c:	b4b0      	push	{r4, r5, r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d01c      	beq.n	8000ee6 <LL_TIM_OC_DisableFast+0x4a>
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	2b04      	cmp	r3, #4
 8000eb0:	d017      	beq.n	8000ee2 <LL_TIM_OC_DisableFast+0x46>
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	2b10      	cmp	r3, #16
 8000eb6:	d012      	beq.n	8000ede <LL_TIM_OC_DisableFast+0x42>
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	2b40      	cmp	r3, #64	; 0x40
 8000ebc:	d00d      	beq.n	8000eda <LL_TIM_OC_DisableFast+0x3e>
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ec4:	d007      	beq.n	8000ed6 <LL_TIM_OC_DisableFast+0x3a>
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ecc:	d101      	bne.n	8000ed2 <LL_TIM_OC_DisableFast+0x36>
 8000ece:	2305      	movs	r3, #5
 8000ed0:	e00a      	b.n	8000ee8 <LL_TIM_OC_DisableFast+0x4c>
 8000ed2:	2306      	movs	r3, #6
 8000ed4:	e008      	b.n	8000ee8 <LL_TIM_OC_DisableFast+0x4c>
 8000ed6:	2304      	movs	r3, #4
 8000ed8:	e006      	b.n	8000ee8 <LL_TIM_OC_DisableFast+0x4c>
 8000eda:	2303      	movs	r3, #3
 8000edc:	e004      	b.n	8000ee8 <LL_TIM_OC_DisableFast+0x4c>
 8000ede:	2302      	movs	r3, #2
 8000ee0:	e002      	b.n	8000ee8 <LL_TIM_OC_DisableFast+0x4c>
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e000      	b.n	8000ee8 <LL_TIM_OC_DisableFast+0x4c>
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	3318      	adds	r3, #24
 8000eee:	461a      	mov	r2, r3
 8000ef0:	4629      	mov	r1, r5
 8000ef2:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <LL_TIM_OC_DisableFast+0x7c>)
 8000ef4:	5c5b      	ldrb	r3, [r3, r1]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000efa:	6822      	ldr	r2, [r4, #0]
 8000efc:	4629      	mov	r1, r5
 8000efe:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <LL_TIM_OC_DisableFast+0x80>)
 8000f00:	5c5b      	ldrb	r3, [r3, r1]
 8000f02:	4619      	mov	r1, r3
 8000f04:	2304      	movs	r3, #4
 8000f06:	408b      	lsls	r3, r1
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	6023      	str	r3, [r4, #0]

}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bcb0      	pop	{r4, r5, r7}
 8000f16:	4770      	bx	lr
 8000f18:	08002b64 	.word	0x08002b64
 8000f1c:	08002b6c 	.word	0x08002b6c

08000f20 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f32:	f023 0307 	bic.w	r3, r3, #7
 8000f36:	683a      	ldr	r2, [r7, #0]
 8000f38:	431a      	orrs	r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
 8000f52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	431a      	orrs	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	605a      	str	r2, [r3, #4]
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	609a      	str	r2, [r3, #8]
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	60da      	str	r2, [r3, #12]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	691b      	ldr	r3, [r3, #16]
 8000fbc:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	695b      	ldr	r3, [r3, #20]
 8000fc8:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	615a      	str	r2, [r3, #20]
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fec:	2b40      	cmp	r3, #64	; 0x40
 8000fee:	bf0c      	ite	eq
 8000ff0:	2301      	moveq	r3, #1
 8000ff2:	2300      	movne	r3, #0
 8000ff4:	b2db      	uxtb	r3, r3
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001002:	b480      	push	{r7}
 8001004:	b083      	sub	sp, #12
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
 800100a:	460b      	mov	r3, r1
 800100c:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800100e:	78fa      	ldrb	r2, [r7, #3]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	605a      	str	r2, [r3, #4]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	041a      	lsls	r2, r3, #16
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	619a      	str	r2, [r3, #24]
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001046:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800104a:	f7ff fe9b 	bl	8000d84 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800104e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001052:	f7ff fe7f 	bl	8000d54 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001056:	2003      	movs	r0, #3
 8001058:	f7ff fa3c 	bl	80004d4 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */
  int i;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800105c:	f000 f88a 	bl	8001174 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001060:	f000 faaa 	bl	80015b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001064:	f000 fa7c 	bl	8001560 <MX_DMA_Init>
  MX_ADC1_Init();
 8001068:	f000 f8d2 	bl	8001210 <MX_ADC1_Init>
  MX_TIM2_Init();
 800106c:	f000 f978 	bl	8001360 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001070:	f000 f9e6 	bl	8001440 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* direct tx of a few data */
    for (i = 1; i < 6; ++i){
 8001074:	2301      	movs	r3, #1
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	e011      	b.n	800109e <main+0x5e>
  	  LL_USART_TransmitData8(USART2, str[i]);
 800107a:	4a34      	ldr	r2, [pc, #208]	; (800114c <main+0x10c>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4413      	add	r3, r2
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	4619      	mov	r1, r3
 8001084:	4832      	ldr	r0, [pc, #200]	; (8001150 <main+0x110>)
 8001086:	f7ff ffbc 	bl	8001002 <LL_USART_TransmitData8>
  	  while(LL_USART_IsActiveFlag_TC(USART2)==0);
 800108a:	bf00      	nop
 800108c:	4830      	ldr	r0, [pc, #192]	; (8001150 <main+0x110>)
 800108e:	f7ff ffa5 	bl	8000fdc <LL_USART_IsActiveFlag_TC>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d0f9      	beq.n	800108c <main+0x4c>
    for (i = 1; i < 6; ++i){
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3301      	adds	r3, #1
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b05      	cmp	r3, #5
 80010a2:	ddea      	ble.n	800107a <main+0x3a>
    }

  LL_TIM_WriteReg(TIM2,CR1,LL_TIM_ReadReg(TIM2,CR1)|0x01);		/* timer 2 enable */
 80010a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010ae:	f043 0301 	orr.w	r3, r3, #1
 80010b2:	6013      	str	r3, [r2, #0]
  LL_ADC_WriteReg(ADC1,CR2,LL_ADC_ReadReg(ADC1,CR2)|0x001);	    /* ADC1 enable */
 80010b4:	4b27      	ldr	r3, [pc, #156]	; (8001154 <main+0x114>)
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	4a26      	ldr	r2, [pc, #152]	; (8001154 <main+0x114>)
 80010ba:	f043 0301 	orr.w	r3, r3, #1
 80010be:	6093      	str	r3, [r2, #8]
  /*LL_ADC_WriteReg(ADC1,CR1,LL_ADC_ReadReg(ADC1,CR1)|0x020);*/	    /* ADC1 interrupt enable */
  /*LL_ADC_WriteReg(ADC1,CR2,LL_ADC_ReadReg(ADC1,CR2)|0x0200);*/	/* ADC1 set DDS  */
  LL_DMA_SetMemoryAddress(DMA1, LL_DMA_STREAM_6, (uint32_t)samples0);
 80010c0:	4b25      	ldr	r3, [pc, #148]	; (8001158 <main+0x118>)
 80010c2:	461a      	mov	r2, r3
 80010c4:	2106      	movs	r1, #6
 80010c6:	4825      	ldr	r0, [pc, #148]	; (800115c <main+0x11c>)
 80010c8:	f7ff fce6 	bl	8000a98 <LL_DMA_SetMemoryAddress>
  /*LL_DMA_SetMemory1Address(DMA1, LL_DMA_STREAM_6, (uint32_t)samples1);*/
  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_STREAM_6, (uint32_t)&USART2->DR);
 80010cc:	4a24      	ldr	r2, [pc, #144]	; (8001160 <main+0x120>)
 80010ce:	2106      	movs	r1, #6
 80010d0:	4822      	ldr	r0, [pc, #136]	; (800115c <main+0x11c>)
 80010d2:	f7ff fcf9 	bl	8000ac8 <LL_DMA_SetPeriphAddress>
  LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_6, NN);
 80010d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010da:	461a      	mov	r2, r3
 80010dc:	2106      	movs	r1, #6
 80010de:	481f      	ldr	r0, [pc, #124]	; (800115c <main+0x11c>)
 80010e0:	f7ff fc72 	bl	80009c8 <LL_DMA_SetDataLength>
  /*LL_DMA_WriteReg(DMA1,S6CR,LL_DMA_ReadReg(DMA1,S6CR)|0x40000);*/	/* set double-buffer mode */
  /*LL_DMA_EnableDoubleBufferMode(DMA1,LL_DMA_STREAM_6);*/
  LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_0, (uint32_t)samples0);
 80010e4:	4b1c      	ldr	r3, [pc, #112]	; (8001158 <main+0x118>)
 80010e6:	461a      	mov	r2, r3
 80010e8:	2100      	movs	r1, #0
 80010ea:	481e      	ldr	r0, [pc, #120]	; (8001164 <main+0x124>)
 80010ec:	f7ff fcd4 	bl	8000a98 <LL_DMA_SetMemoryAddress>
  /*LL_DMA_SetMemory1Address(DMA2, LL_DMA_STREAM_0, (uint32_t)samples1);*/
  LL_DMA_SetPeriphAddress(DMA2, LL_DMA_STREAM_0, (uint32_t)&ADC1->DR);
 80010f0:	4a1d      	ldr	r2, [pc, #116]	; (8001168 <main+0x128>)
 80010f2:	2100      	movs	r1, #0
 80010f4:	481b      	ldr	r0, [pc, #108]	; (8001164 <main+0x124>)
 80010f6:	f7ff fce7 	bl	8000ac8 <LL_DMA_SetPeriphAddress>
  LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_0, NN);
 80010fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010fe:	461a      	mov	r2, r3
 8001100:	2100      	movs	r1, #0
 8001102:	4818      	ldr	r0, [pc, #96]	; (8001164 <main+0x124>)
 8001104:	f7ff fc60 	bl	80009c8 <LL_DMA_SetDataLength>
  /*LL_USART_ClearFlag_TC(USART2);*/
  /*LL_USART_Enable (USART2);*/										/* USART enable */
  /*LL_USART_WriteReg(USART2,CR1,LL_USART_ReadReg(USART2,CR1)|0x040);*/	    /* USART interrupt enable */
  /*LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_6);*/
  /*LL_USART_EnableDMAReq_TX(USART2);*/
  LL_DBGMCU_APB1_GRP1_FreezePeriph(LL_DBGMCU_APB1_GRP1_TIM2_STOP);
 8001108:	2001      	movs	r0, #1
 800110a:	f7ff fe53 	bl	8000db4 <LL_DBGMCU_APB1_GRP1_FreezePeriph>
  LL_DMA_EnableIT_TC(DMA2,LL_DMA_STREAM_0);
 800110e:	2100      	movs	r1, #0
 8001110:	4814      	ldr	r0, [pc, #80]	; (8001164 <main+0x124>)
 8001112:	f7ff fcf1 	bl	8000af8 <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_TC(DMA1,LL_DMA_STREAM_6);
 8001116:	2106      	movs	r1, #6
 8001118:	4810      	ldr	r0, [pc, #64]	; (800115c <main+0x11c>)
 800111a:	f7ff fced 	bl	8000af8 <LL_DMA_EnableIT_TC>
  LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_0);
 800111e:	2100      	movs	r1, #0
 8001120:	4810      	ldr	r0, [pc, #64]	; (8001164 <main+0x124>)
 8001122:	f7ff fb35 	bl	8000790 <LL_DMA_EnableStream>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  pointer = 0;
 8001126:	4b11      	ldr	r3, [pc, #68]	; (800116c <main+0x12c>)
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
  LL_GPIO_WriteReg(GPIOA ,ODR, LL_GPIO_ReadReg(GPIOA , ODR) | 0x400);
 800112c:	4b10      	ldr	r3, [pc, #64]	; (8001170 <main+0x130>)
 800112e:	695b      	ldr	r3, [r3, #20]
 8001130:	4a0f      	ldr	r2, [pc, #60]	; (8001170 <main+0x130>)
 8001132:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001136:	6153      	str	r3, [r2, #20]

  while (1)
  {
	  LL_GPIO_WriteReg(GPIOA ,ODR, LL_GPIO_ReadReg(GPIOA , ODR) ^ 0x400);
 8001138:	4b0d      	ldr	r3, [pc, #52]	; (8001170 <main+0x130>)
 800113a:	695b      	ldr	r3, [r3, #20]
 800113c:	4a0c      	ldr	r2, [pc, #48]	; (8001170 <main+0x130>)
 800113e:	f483 6380 	eor.w	r3, r3, #1024	; 0x400
 8001142:	6153      	str	r3, [r2, #20]
	  LL_mDelay(0.5);
 8001144:	2000      	movs	r0, #0
 8001146:	f001 fc9d 	bl	8002a84 <LL_mDelay>
	  LL_GPIO_WriteReg(GPIOA ,ODR, LL_GPIO_ReadReg(GPIOA , ODR) ^ 0x400);
 800114a:	e7f5      	b.n	8001138 <main+0xf8>
 800114c:	08002b78 	.word	0x08002b78
 8001150:	40004400 	.word	0x40004400
 8001154:	40012000 	.word	0x40012000
 8001158:	20000028 	.word	0x20000028
 800115c:	40026000 	.word	0x40026000
 8001160:	40004404 	.word	0x40004404
 8001164:	40026400 	.word	0x40026400
 8001168:	4001204c 	.word	0x4001204c
 800116c:	20000024 	.word	0x20000024
 8001170:	40020000 	.word	0x40020000

08001174 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8001178:	2002      	movs	r0, #2
 800117a:	f7ff fe2d 	bl	8000dd8 <LL_FLASH_SetLatency>

   if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2)
 800117e:	f7ff fe3f 	bl	8000e00 <LL_FLASH_GetLatency>
 8001182:	4603      	mov	r3, r0
 8001184:	2b02      	cmp	r3, #2
 8001186:	d001      	beq.n	800118c <SystemClock_Config+0x18>
  {
  Error_Handler();  
 8001188:	f000 fa42 	bl	8001610 <Error_Handler>
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 800118c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001190:	f7ff fe60 	bl	8000e54 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 8001194:	2010      	movs	r0, #16
 8001196:	f7ff fcf1 	bl	8000b7c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 800119a:	f7ff fccd 	bl	8000b38 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800119e:	bf00      	nop
 80011a0:	f7ff fcda 	bl	8000b58 <LL_RCC_HSI_IsReady>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d1fa      	bne.n	80011a0 <SystemClock_Config+0x2c>
  {
    
  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_16, 336, LL_RCC_PLLP_DIV_4);
 80011aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011ae:	f44f 72a8 	mov.w	r2, #336	; 0x150
 80011b2:	2110      	movs	r1, #16
 80011b4:	2000      	movs	r0, #0
 80011b6:	f7ff fd8f 	bl	8000cd8 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80011ba:	f7ff fd69 	bl	8000c90 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80011be:	bf00      	nop
 80011c0:	f7ff fd76 	bl	8000cb0 <LL_RCC_PLL_IsReady>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d1fa      	bne.n	80011c0 <SystemClock_Config+0x4c>
  {
    
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80011ca:	2000      	movs	r0, #0
 80011cc:	f7ff fd0e 	bl	8000bec <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 80011d0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80011d4:	f7ff fd1e 	bl	8000c14 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80011d8:	2000      	movs	r0, #0
 80011da:	f7ff fd2f 	bl	8000c3c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80011de:	2002      	movs	r0, #2
 80011e0:	f7ff fce2 	bl	8000ba8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80011e4:	bf00      	nop
 80011e6:	f7ff fcf3 	bl	8000bd0 <LL_RCC_GetSysClkSource>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b08      	cmp	r3, #8
 80011ee:	d1fa      	bne.n	80011e6 <SystemClock_Config+0x72>
  {
  
  }
  LL_Init1msTick(84000000);
 80011f0:	4806      	ldr	r0, [pc, #24]	; (800120c <SystemClock_Config+0x98>)
 80011f2:	f001 fc39 	bl	8002a68 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 80011f6:	2004      	movs	r0, #4
 80011f8:	f7ff fe10 	bl	8000e1c <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(84000000);
 80011fc:	4803      	ldr	r0, [pc, #12]	; (800120c <SystemClock_Config+0x98>)
 80011fe:	f001 fc65 	bl	8002acc <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8001202:	2000      	movs	r0, #0
 8001204:	f7ff fd2e 	bl	8000c64 <LL_RCC_SetTIMPrescaler>
}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}
 800120c:	0501bd00 	.word	0x0501bd00

08001210 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b090      	sub	sp, #64	; 0x40
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001216:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001222:	f107 0320 	add.w	r3, r7, #32
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
 8001230:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001232:	2300      	movs	r3, #0
 8001234:	61fb      	str	r3, [r7, #28]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
 8001244:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8001246:	f44f 7080 	mov.w	r0, #256	; 0x100
 800124a:	f7ff fd9b 	bl	8000d84 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800124e:	2004      	movs	r0, #4
 8001250:	f7ff fd68 	bl	8000d24 <LL_AHB1_GRP1_EnableClock>
  /**ADC1 GPIO Configuration  
  PC1   ------> ADC1_IN11 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8001254:	2302      	movs	r3, #2
 8001256:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001258:	2303      	movs	r3, #3
 800125a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001260:	1d3b      	adds	r3, r7, #4
 8001262:	4619      	mov	r1, r3
 8001264:	4839      	ldr	r0, [pc, #228]	; (800134c <MX_ADC1_Init+0x13c>)
 8001266:	f000 fd43 	bl	8001cf0 <LL_GPIO_Init>

  /* ADC1 DMA Init */
  
  /* ADC1 Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_0, LL_DMA_CHANNEL_0);
 800126a:	2200      	movs	r2, #0
 800126c:	2100      	movs	r1, #0
 800126e:	4838      	ldr	r0, [pc, #224]	; (8001350 <MX_ADC1_Init+0x140>)
 8001270:	f7ff fbce 	bl	8000a10 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_0, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001274:	2200      	movs	r2, #0
 8001276:	2100      	movs	r1, #0
 8001278:	4835      	ldr	r0, [pc, #212]	; (8001350 <MX_ADC1_Init+0x140>)
 800127a:	f7ff faa9 	bl	80007d0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_0, LL_DMA_PRIORITY_LOW);
 800127e:	2200      	movs	r2, #0
 8001280:	2100      	movs	r1, #0
 8001282:	4833      	ldr	r0, [pc, #204]	; (8001350 <MX_ADC1_Init+0x140>)
 8001284:	f7ff fb7c 	bl	8000980 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MODE_NORMAL);
 8001288:	2200      	movs	r2, #0
 800128a:	2100      	movs	r1, #0
 800128c:	4830      	ldr	r0, [pc, #192]	; (8001350 <MX_ADC1_Init+0x140>)
 800128e:	f7ff fac3 	bl	8000818 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_PERIPH_NOINCREMENT);
 8001292:	2200      	movs	r2, #0
 8001294:	2100      	movs	r1, #0
 8001296:	482e      	ldr	r0, [pc, #184]	; (8001350 <MX_ADC1_Init+0x140>)
 8001298:	f7ff fae2 	bl	8000860 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MEMORY_INCREMENT);
 800129c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012a0:	2100      	movs	r1, #0
 80012a2:	482b      	ldr	r0, [pc, #172]	; (8001350 <MX_ADC1_Init+0x140>)
 80012a4:	f7ff fb00 	bl	80008a8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_0, LL_DMA_PDATAALIGN_BYTE);
 80012a8:	2200      	movs	r2, #0
 80012aa:	2100      	movs	r1, #0
 80012ac:	4828      	ldr	r0, [pc, #160]	; (8001350 <MX_ADC1_Init+0x140>)
 80012ae:	f7ff fb1f 	bl	80008f0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_0, LL_DMA_MDATAALIGN_BYTE);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2100      	movs	r1, #0
 80012b6:	4826      	ldr	r0, [pc, #152]	; (8001350 <MX_ADC1_Init+0x140>)
 80012b8:	f7ff fb3e 	bl	8000938 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_0);
 80012bc:	2100      	movs	r1, #0
 80012be:	4824      	ldr	r0, [pc, #144]	; (8001350 <MX_ADC1_Init+0x140>)
 80012c0:	f7ff fbca 	bl	8000a58 <LL_DMA_DisableFifoMode>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_8B;
 80012c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012c8:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80012ca:	2300      	movs	r3, #0
 80012cc:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 80012ce:	2300      	movs	r3, #0
 80012d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80012d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012d6:	4619      	mov	r1, r3
 80012d8:	481e      	ldr	r0, [pc, #120]	; (8001354 <MX_ADC1_Init+0x144>)
 80012da:	f000 fb81 	bl	80019e0 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_TIM2_TRGO;
 80012de:	f04f 53b0 	mov.w	r3, #369098752	; 0x16000000
 80012e2:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80012e8:	2300      	movs	r3, #0
 80012ea:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 80012f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012f4:	633b      	str	r3, [r7, #48]	; 0x30
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80012f6:	f107 0320 	add.w	r3, r7, #32
 80012fa:	4619      	mov	r1, r3
 80012fc:	4815      	ldr	r0, [pc, #84]	; (8001354 <MX_ADC1_Init+0x144>)
 80012fe:	f000 fb9b 	bl	8001a38 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV);
 8001302:	2100      	movs	r1, #0
 8001304:	4813      	ldr	r0, [pc, #76]	; (8001354 <MX_ADC1_Init+0x144>)
 8001306:	f7ff f9c5 	bl	8000694 <LL_ADC_REG_SetFlagEndOfConversion>
  LL_ADC_DisableIT_EOCS(ADC1);
 800130a:	4812      	ldr	r0, [pc, #72]	; (8001354 <MX_ADC1_Init+0x144>)
 800130c:	f7ff fa2f 	bl	800076e <LL_ADC_DisableIT_EOCS>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 8001310:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001314:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8001316:	f107 031c 	add.w	r3, r7, #28
 800131a:	4619      	mov	r1, r3
 800131c:	480e      	ldr	r0, [pc, #56]	; (8001358 <MX_ADC1_Init+0x148>)
 800131e:	f000 fb41 	bl	80019a4 <LL_ADC_CommonInit>
  LL_ADC_REG_StartConversionExtTrig(ADC1, LL_ADC_REG_TRIG_EXT_RISING);
 8001322:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8001326:	480b      	ldr	r0, [pc, #44]	; (8001354 <MX_ADC1_Init+0x144>)
 8001328:	f7ff fa10 	bl	800074c <LL_ADC_REG_StartConversionExtTrig>
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_11);
 800132c:	4a0b      	ldr	r2, [pc, #44]	; (800135c <MX_ADC1_Init+0x14c>)
 800132e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001332:	4808      	ldr	r0, [pc, #32]	; (8001354 <MX_ADC1_Init+0x144>)
 8001334:	f7ff f97b 	bl	800062e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_3CYCLES);
 8001338:	2200      	movs	r2, #0
 800133a:	4908      	ldr	r1, [pc, #32]	; (800135c <MX_ADC1_Init+0x14c>)
 800133c:	4805      	ldr	r0, [pc, #20]	; (8001354 <MX_ADC1_Init+0x144>)
 800133e:	f7ff f9bc 	bl	80006ba <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	3740      	adds	r7, #64	; 0x40
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40020800 	.word	0x40020800
 8001350:	40026400 	.word	0x40026400
 8001354:	40012000 	.word	0x40012000
 8001358:	40012300 	.word	0x40012300
 800135c:	0030000b 	.word	0x0030000b

08001360 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b094      	sub	sp, #80	; 0x50
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001366:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
 8001374:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001376:	f107 031c 	add.w	r3, r7, #28
 800137a:	2220      	movs	r2, #32
 800137c:	2100      	movs	r1, #0
 800137e:	4618      	mov	r0, r3
 8001380:	f001 fbd8 	bl	8002b34 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	1d3b      	adds	r3, r7, #4
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]
 8001390:	611a      	str	r2, [r3, #16]
 8001392:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001394:	2001      	movs	r0, #1
 8001396:	f7ff fcdd 	bl	8000d54 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 20;
 800139a:	2314      	movs	r3, #20
 800139c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800139e:	2300      	movs	r3, #0
 80013a0:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 100;
 80013a2:	2364      	movs	r3, #100	; 0x64
 80013a4:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80013a6:	2300      	movs	r3, #0
 80013a8:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80013aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013ae:	4619      	mov	r1, r3
 80013b0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80013b4:	f000 feba 	bl	800212c <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM2);
 80013b8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80013bc:	f7ff fd5e 	bl	8000e7c <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 80013c0:	2100      	movs	r1, #0
 80013c2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80013c6:	f7ff fdab 	bl	8000f20 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_TOGGLE;
 80013ca:	2330      	movs	r3, #48	; 0x30
 80013cc:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80013d2:	2300      	movs	r3, #0
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 99;
 80013d6:	2363      	movs	r3, #99	; 0x63
 80013d8:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80013da:	2300      	movs	r3, #0
 80013dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80013de:	f107 031c 	add.w	r3, r7, #28
 80013e2:	461a      	mov	r2, r3
 80013e4:	2101      	movs	r1, #1
 80013e6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80013ea:	f000 ff19 	bl	8002220 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 80013ee:	2101      	movs	r1, #1
 80013f0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80013f4:	f7ff fd52 	bl	8000e9c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_OC1REF);
 80013f8:	2140      	movs	r1, #64	; 0x40
 80013fa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80013fe:	f7ff fda4 	bl	8000f4a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8001402:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001406:	f7ff fdb3 	bl	8000f70 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800140a:	2001      	movs	r0, #1
 800140c:	f7ff fc8a 	bl	8000d24 <LL_AHB1_GRP1_EnableClock>
  /**TIM2 GPIO Configuration  
  PA5   ------> TIM2_CH1 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8001410:	2320      	movs	r3, #32
 8001412:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001414:	2302      	movs	r3, #2
 8001416:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001418:	2300      	movs	r3, #0
 800141a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001424:	2301      	movs	r3, #1
 8001426:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	4619      	mov	r1, r3
 800142c:	4803      	ldr	r0, [pc, #12]	; (800143c <MX_TIM2_Init+0xdc>)
 800142e:	f000 fc5f 	bl	8001cf0 <LL_GPIO_Init>

}
 8001432:	bf00      	nop
 8001434:	3750      	adds	r7, #80	; 0x50
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40020000 	.word	0x40020000

08001440 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08e      	sub	sp, #56	; 0x38
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001446:	f107 031c 	add.w	r3, r7, #28
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
 8001454:	611a      	str	r2, [r3, #16]
 8001456:	615a      	str	r2, [r3, #20]
 8001458:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
 8001468:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800146a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800146e:	f7ff fc71 	bl	8000d54 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001472:	2001      	movs	r0, #1
 8001474:	f7ff fc56 	bl	8000d24 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration  
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8001478:	230c      	movs	r3, #12
 800147a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800147c:	2302      	movs	r3, #2
 800147e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001480:	2303      	movs	r3, #3
 8001482:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800148c:	2307      	movs	r3, #7
 800148e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	4619      	mov	r1, r3
 8001494:	482f      	ldr	r0, [pc, #188]	; (8001554 <MX_USART2_UART_Init+0x114>)
 8001496:	f000 fc2b 	bl	8001cf0 <LL_GPIO_Init>

  /* USART2 DMA Init */
  
  /* USART2_TX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_6, LL_DMA_CHANNEL_4);
 800149a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800149e:	2106      	movs	r1, #6
 80014a0:	482d      	ldr	r0, [pc, #180]	; (8001558 <MX_USART2_UART_Init+0x118>)
 80014a2:	f7ff fab5 	bl	8000a10 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80014a6:	2240      	movs	r2, #64	; 0x40
 80014a8:	2106      	movs	r1, #6
 80014aa:	482b      	ldr	r0, [pc, #172]	; (8001558 <MX_USART2_UART_Init+0x118>)
 80014ac:	f7ff f990 	bl	80007d0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_6, LL_DMA_PRIORITY_LOW);
 80014b0:	2200      	movs	r2, #0
 80014b2:	2106      	movs	r1, #6
 80014b4:	4828      	ldr	r0, [pc, #160]	; (8001558 <MX_USART2_UART_Init+0x118>)
 80014b6:	f7ff fa63 	bl	8000980 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MODE_NORMAL);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2106      	movs	r1, #6
 80014be:	4826      	ldr	r0, [pc, #152]	; (8001558 <MX_USART2_UART_Init+0x118>)
 80014c0:	f7ff f9aa 	bl	8000818 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_PERIPH_NOINCREMENT);
 80014c4:	2200      	movs	r2, #0
 80014c6:	2106      	movs	r1, #6
 80014c8:	4823      	ldr	r0, [pc, #140]	; (8001558 <MX_USART2_UART_Init+0x118>)
 80014ca:	f7ff f9c9 	bl	8000860 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MEMORY_INCREMENT);
 80014ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014d2:	2106      	movs	r1, #6
 80014d4:	4820      	ldr	r0, [pc, #128]	; (8001558 <MX_USART2_UART_Init+0x118>)
 80014d6:	f7ff f9e7 	bl	80008a8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_6, LL_DMA_PDATAALIGN_BYTE);
 80014da:	2200      	movs	r2, #0
 80014dc:	2106      	movs	r1, #6
 80014de:	481e      	ldr	r0, [pc, #120]	; (8001558 <MX_USART2_UART_Init+0x118>)
 80014e0:	f7ff fa06 	bl	80008f0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_6, LL_DMA_MDATAALIGN_BYTE);
 80014e4:	2200      	movs	r2, #0
 80014e6:	2106      	movs	r1, #6
 80014e8:	481b      	ldr	r0, [pc, #108]	; (8001558 <MX_USART2_UART_Init+0x118>)
 80014ea:	f7ff fa25 	bl	8000938 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_6);
 80014ee:	2106      	movs	r1, #6
 80014f0:	4819      	ldr	r0, [pc, #100]	; (8001558 <MX_USART2_UART_Init+0x118>)
 80014f2:	f7ff fab1 	bl	8000a58 <LL_DMA_DisableFifoMode>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80014f6:	f7ff f811 	bl	800051c <__NVIC_GetPriorityGrouping>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2200      	movs	r2, #0
 80014fe:	2100      	movs	r1, #0
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff f861 	bl	80005c8 <NVIC_EncodePriority>
 8001506:	4603      	mov	r3, r0
 8001508:	4619      	mov	r1, r3
 800150a:	2026      	movs	r0, #38	; 0x26
 800150c:	f7ff f832 	bl	8000574 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001510:	2026      	movs	r0, #38	; 0x26
 8001512:	f7ff f811 	bl	8000538 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001516:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800151a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800151c:	2300      	movs	r3, #0
 800151e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001520:	2300      	movs	r3, #0
 8001522:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001524:	2300      	movs	r3, #0
 8001526:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX;
 8001528:	2308      	movs	r3, #8
 800152a:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800152c:	2300      	movs	r3, #0
 800152e:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001530:	2300      	movs	r3, #0
 8001532:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8001534:	f107 031c 	add.w	r3, r7, #28
 8001538:	4619      	mov	r1, r3
 800153a:	4808      	ldr	r0, [pc, #32]	; (800155c <MX_USART2_UART_Init+0x11c>)
 800153c:	f001 fa16 	bl	800296c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001540:	4806      	ldr	r0, [pc, #24]	; (800155c <MX_USART2_UART_Init+0x11c>)
 8001542:	f7ff fd35 	bl	8000fb0 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001546:	4805      	ldr	r0, [pc, #20]	; (800155c <MX_USART2_UART_Init+0x11c>)
 8001548:	f7ff fd22 	bl	8000f90 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800154c:	bf00      	nop
 800154e:	3738      	adds	r7, #56	; 0x38
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40020000 	.word	0x40020000
 8001558:	40026000 	.word	0x40026000
 800155c:	40004400 	.word	0x40004400

08001560 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8001564:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001568:	f7ff fbdc 	bl	8000d24 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 800156c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001570:	f7ff fbd8 	bl	8000d24 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001574:	f7fe ffd2 	bl	800051c <__NVIC_GetPriorityGrouping>
 8001578:	4603      	mov	r3, r0
 800157a:	2200      	movs	r2, #0
 800157c:	2100      	movs	r1, #0
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff f822 	bl	80005c8 <NVIC_EncodePriority>
 8001584:	4603      	mov	r3, r0
 8001586:	4619      	mov	r1, r3
 8001588:	2011      	movs	r0, #17
 800158a:	f7fe fff3 	bl	8000574 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800158e:	2011      	movs	r0, #17
 8001590:	f7fe ffd2 	bl	8000538 <__NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001594:	f7fe ffc2 	bl	800051c <__NVIC_GetPriorityGrouping>
 8001598:	4603      	mov	r3, r0
 800159a:	2200      	movs	r2, #0
 800159c:	2100      	movs	r1, #0
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff f812 	bl	80005c8 <NVIC_EncodePriority>
 80015a4:	4603      	mov	r3, r0
 80015a6:	4619      	mov	r1, r3
 80015a8:	2038      	movs	r0, #56	; 0x38
 80015aa:	f7fe ffe3 	bl	8000574 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80015ae:	2038      	movs	r0, #56	; 0x38
 80015b0:	f7fe ffc2 	bl	8000538 <__NVIC_EnableIRQ>

}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015be:	463b      	mov	r3, r7
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
 80015cc:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80015ce:	2004      	movs	r0, #4
 80015d0:	f7ff fba8 	bl	8000d24 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80015d4:	2001      	movs	r0, #1
 80015d6:	f7ff fba5 	bl	8000d24 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_10);
 80015da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015de:	480b      	ldr	r0, [pc, #44]	; (800160c <MX_GPIO_Init+0x54>)
 80015e0:	f7ff fd1e 	bl	8001020 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80015e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015e8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80015ea:	2301      	movs	r3, #1
 80015ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80015ee:	2300      	movs	r3, #0
 80015f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fa:	463b      	mov	r3, r7
 80015fc:	4619      	mov	r1, r3
 80015fe:	4803      	ldr	r0, [pc, #12]	; (800160c <MX_GPIO_Init+0x54>)
 8001600:	f000 fb76 	bl	8001cf0 <LL_GPIO_Init>

}
 8001604:	bf00      	nop
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40020000 	.word	0x40020000

08001610 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
	...

08001620 <LL_DMA_EnableStream>:
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 800162a:	4a0c      	ldr	r2, [pc, #48]	; (800165c <LL_DMA_EnableStream+0x3c>)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	4413      	add	r3, r2
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	461a      	mov	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4413      	add	r3, r2
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4908      	ldr	r1, [pc, #32]	; (800165c <LL_DMA_EnableStream+0x3c>)
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	440a      	add	r2, r1
 8001640:	7812      	ldrb	r2, [r2, #0]
 8001642:	4611      	mov	r1, r2
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	440a      	add	r2, r1
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6013      	str	r3, [r2, #0]
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	08002b80 	.word	0x08002b80

08001660 <LL_DMA_SetDataLength>:
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 800166c:	4a0d      	ldr	r2, [pc, #52]	; (80016a4 <LL_DMA_SetDataLength+0x44>)
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	4413      	add	r3, r2
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	461a      	mov	r2, r3
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	4413      	add	r3, r2
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	0c1b      	lsrs	r3, r3, #16
 800167e:	041b      	lsls	r3, r3, #16
 8001680:	4908      	ldr	r1, [pc, #32]	; (80016a4 <LL_DMA_SetDataLength+0x44>)
 8001682:	68ba      	ldr	r2, [r7, #8]
 8001684:	440a      	add	r2, r1
 8001686:	7812      	ldrb	r2, [r2, #0]
 8001688:	4611      	mov	r1, r2
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	440a      	add	r2, r1
 800168e:	4611      	mov	r1, r2
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	4313      	orrs	r3, r2
 8001694:	604b      	str	r3, [r1, #4]
}
 8001696:	bf00      	nop
 8001698:	3714      	adds	r7, #20
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	08002b80 	.word	0x08002b80

080016a8 <LL_DMA_IsActiveFlag_TC0>:
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF0)==(DMA_LISR_TCIF0));
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0320 	and.w	r3, r3, #32
 80016b8:	2b20      	cmp	r3, #32
 80016ba:	bf0c      	ite	eq
 80016bc:	2301      	moveq	r3, #1
 80016be:	2300      	movne	r3, #0
 80016c0:	b2db      	uxtb	r3, r3
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <LL_DMA_IsActiveFlag_TC6>:
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF6)==(DMA_HISR_TCIF6));
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80016e2:	bf0c      	ite	eq
 80016e4:	2301      	moveq	r3, #1
 80016e6:	2300      	movne	r3, #0
 80016e8:	b2db      	uxtb	r3, r3
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <LL_DMA_ClearFlag_HT0>:
{
 80016f6:	b480      	push	{r7}
 80016f8:	b083      	sub	sp, #12
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CHTIF0);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2210      	movs	r2, #16
 8001702:	609a      	str	r2, [r3, #8]
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <LL_DMA_ClearFlag_HT6>:
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CHTIF6);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800171e:	60da      	str	r2, [r3, #12]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <LL_DMA_ClearFlag_TC0>:
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF0);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2220      	movs	r2, #32
 8001738:	609a      	str	r2, [r3, #8]
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <LL_DMA_ClearFlag_TC6>:
{
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF6);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001754:	60da      	str	r2, [r3, #12]
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <LL_USART_EnableDMAReq_TX>:
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	615a      	str	r2, [r3, #20]
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001794:	e7fe      	b.n	8001794 <HardFault_Handler+0x4>

08001796 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800179a:	e7fe      	b.n	800179a <MemManage_Handler+0x4>

0800179c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017a0:	e7fe      	b.n	80017a0 <BusFault_Handler+0x4>

080017a2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a6:	e7fe      	b.n	80017a6 <UsageFault_Handler+0x4>

080017a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

	if (LL_DMA_IsActiveFlag_TC6(DMA1)==1){
 80017e4:	4815      	ldr	r0, [pc, #84]	; (800183c <DMA1_Stream6_IRQHandler+0x5c>)
 80017e6:	f7ff ff72 	bl	80016ce <LL_DMA_IsActiveFlag_TC6>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d122      	bne.n	8001836 <DMA1_Stream6_IRQHandler+0x56>
			LL_DMA_ClearFlag_TC6(DMA1);
 80017f0:	4812      	ldr	r0, [pc, #72]	; (800183c <DMA1_Stream6_IRQHandler+0x5c>)
 80017f2:	f7ff ffa8 	bl	8001746 <LL_DMA_ClearFlag_TC6>
			LL_DMA_ClearFlag_HT6(DMA1);
 80017f6:	4811      	ldr	r0, [pc, #68]	; (800183c <DMA1_Stream6_IRQHandler+0x5c>)
 80017f8:	f7ff ff8a 	bl	8001710 <LL_DMA_ClearFlag_HT6>
			LL_DMA_ClearFlag_TC0(DMA2);
 80017fc:	4810      	ldr	r0, [pc, #64]	; (8001840 <DMA1_Stream6_IRQHandler+0x60>)
 80017fe:	f7ff ff95 	bl	800172c <LL_DMA_ClearFlag_TC0>
			LL_DMA_ClearFlag_HT0(DMA2);
 8001802:	480f      	ldr	r0, [pc, #60]	; (8001840 <DMA1_Stream6_IRQHandler+0x60>)
 8001804:	f7ff ff77 	bl	80016f6 <LL_DMA_ClearFlag_HT0>
			LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_0, NN);
 8001808:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <DMA1_Stream6_IRQHandler+0x64>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	461a      	mov	r2, r3
 800180e:	2100      	movs	r1, #0
 8001810:	480b      	ldr	r0, [pc, #44]	; (8001840 <DMA1_Stream6_IRQHandler+0x60>)
 8001812:	f7ff ff25 	bl	8001660 <LL_DMA_SetDataLength>
			LL_ADC_WriteReg(ADC1,CR2,LL_ADC_ReadReg(ADC1,CR2)&0xFFFFFEFF);
 8001816:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <DMA1_Stream6_IRQHandler+0x68>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	4a0b      	ldr	r2, [pc, #44]	; (8001848 <DMA1_Stream6_IRQHandler+0x68>)
 800181c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001820:	6093      	str	r3, [r2, #8]
			LL_ADC_WriteReg(ADC1,CR2,LL_ADC_ReadReg(ADC1,CR2)|0x100);
 8001822:	4b09      	ldr	r3, [pc, #36]	; (8001848 <DMA1_Stream6_IRQHandler+0x68>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	4a08      	ldr	r2, [pc, #32]	; (8001848 <DMA1_Stream6_IRQHandler+0x68>)
 8001828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800182c:	6093      	str	r3, [r2, #8]
			LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_0);
 800182e:	2100      	movs	r1, #0
 8001830:	4803      	ldr	r0, [pc, #12]	; (8001840 <DMA1_Stream6_IRQHandler+0x60>)
 8001832:	f7ff fef5 	bl	8001620 <LL_DMA_EnableStream>
  /* USER CODE END DMA1_Stream6_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40026000 	.word	0x40026000
 8001840:	40026400 	.word	0x40026400
 8001844:	08002b74 	.word	0x08002b74
 8001848:	40012000 	.word	0x40012000

0800184c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
/*}*/
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
	...

0800185c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */
	/*LL_GPIO_WriteReg( GPIOA, ODR,(LL_GPIO_ReadReg(GPIOA,ODR) ^ 0x400) );*/
	if (LL_DMA_IsActiveFlag_TC0(DMA2)==1){
 8001860:	4810      	ldr	r0, [pc, #64]	; (80018a4 <DMA2_Stream0_IRQHandler+0x48>)
 8001862:	f7ff ff21 	bl	80016a8 <LL_DMA_IsActiveFlag_TC0>
 8001866:	4603      	mov	r3, r0
 8001868:	2b01      	cmp	r3, #1
 800186a:	d119      	bne.n	80018a0 <DMA2_Stream0_IRQHandler+0x44>
		LL_DMA_ClearFlag_TC0(DMA2);
 800186c:	480d      	ldr	r0, [pc, #52]	; (80018a4 <DMA2_Stream0_IRQHandler+0x48>)
 800186e:	f7ff ff5d 	bl	800172c <LL_DMA_ClearFlag_TC0>
		LL_DMA_ClearFlag_HT0(DMA2);
 8001872:	480c      	ldr	r0, [pc, #48]	; (80018a4 <DMA2_Stream0_IRQHandler+0x48>)
 8001874:	f7ff ff3f 	bl	80016f6 <LL_DMA_ClearFlag_HT0>
		LL_DMA_ClearFlag_TC6(DMA1);
 8001878:	480b      	ldr	r0, [pc, #44]	; (80018a8 <DMA2_Stream0_IRQHandler+0x4c>)
 800187a:	f7ff ff64 	bl	8001746 <LL_DMA_ClearFlag_TC6>
		LL_DMA_ClearFlag_HT6(DMA1);
 800187e:	480a      	ldr	r0, [pc, #40]	; (80018a8 <DMA2_Stream0_IRQHandler+0x4c>)
 8001880:	f7ff ff46 	bl	8001710 <LL_DMA_ClearFlag_HT6>
		LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_6, NN);
 8001884:	4b09      	ldr	r3, [pc, #36]	; (80018ac <DMA2_Stream0_IRQHandler+0x50>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	461a      	mov	r2, r3
 800188a:	2106      	movs	r1, #6
 800188c:	4806      	ldr	r0, [pc, #24]	; (80018a8 <DMA2_Stream0_IRQHandler+0x4c>)
 800188e:	f7ff fee7 	bl	8001660 <LL_DMA_SetDataLength>
		LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_6);
 8001892:	2106      	movs	r1, #6
 8001894:	4804      	ldr	r0, [pc, #16]	; (80018a8 <DMA2_Stream0_IRQHandler+0x4c>)
 8001896:	f7ff fec3 	bl	8001620 <LL_DMA_EnableStream>
		LL_USART_EnableDMAReq_TX(USART2);
 800189a:	4805      	ldr	r0, [pc, #20]	; (80018b0 <DMA2_Stream0_IRQHandler+0x54>)
 800189c:	f7ff ff61 	bl	8001762 <LL_USART_EnableDMAReq_TX>
  /* USER CODE END DMA2_Stream0_IRQn 0 */
  
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40026400 	.word	0x40026400
 80018a8:	40026000 	.word	0x40026000
 80018ac:	08002b74 	.word	0x08002b74
 80018b0:	40004400 	.word	0x40004400

080018b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <SystemInit+0x28>)
 80018ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018be:	4a07      	ldr	r2, [pc, #28]	; (80018dc <SystemInit+0x28>)
 80018c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018c8:	4b04      	ldr	r3, [pc, #16]	; (80018dc <SystemInit+0x28>)
 80018ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018ce:	609a      	str	r2, [r3, #8]
#endif
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001918 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80018e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80018e6:	e003      	b.n	80018f0 <LoopCopyDataInit>

080018e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80018e8:	4b0c      	ldr	r3, [pc, #48]	; (800191c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80018ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80018ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80018ee:	3104      	adds	r1, #4

080018f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80018f0:	480b      	ldr	r0, [pc, #44]	; (8001920 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80018f2:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80018f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80018f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80018f8:	d3f6      	bcc.n	80018e8 <CopyDataInit>
  ldr  r2, =_sbss
 80018fa:	4a0b      	ldr	r2, [pc, #44]	; (8001928 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80018fc:	e002      	b.n	8001904 <LoopFillZerobss>

080018fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80018fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001900:	f842 3b04 	str.w	r3, [r2], #4

08001904 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001904:	4b09      	ldr	r3, [pc, #36]	; (800192c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001906:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001908:	d3f9      	bcc.n	80018fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800190a:	f7ff ffd3 	bl	80018b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800190e:	f001 f8ed 	bl	8002aec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001912:	f7ff fb95 	bl	8001040 <main>
  bx  lr    
 8001916:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001918:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 800191c:	08002bb0 	.word	0x08002bb0
  ldr  r0, =_sdata
 8001920:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001924:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8001928:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 800192c:	20000128 	.word	0x20000128

08001930 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001930:	e7fe      	b.n	8001930 <ADC_IRQHandler>

08001932 <LL_ADC_SetCommonClock>:
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
 800193a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_ADCPRE, CommonClock);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	431a      	orrs	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	605a      	str	r2, [r3, #4]
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <LL_ADC_REG_SetSequencerLength>:
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001966:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	431a      	orrs	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <LL_ADC_IsEnabled>:
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b01      	cmp	r3, #1
 8001990:	bf0c      	ite	eq
 8001992:	2301      	moveq	r3, #1
 8001994:	2300      	movne	r3, #0
 8001996:	b2db      	uxtb	r3, r3
}
 8001998:	4618      	mov	r0, r3
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80019ae:	2300      	movs	r3, #0
 80019b0:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 80019b2:	480a      	ldr	r0, [pc, #40]	; (80019dc <LL_ADC_CommonInit+0x38>)
 80019b4:	f7ff ffe3 	bl	800197e <LL_ADC_IsEnabled>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d106      	bne.n	80019cc <LL_ADC_CommonInit+0x28>
                   ADC_CommonInitStruct->CommonClock
                 | LL_ADC_MULTI_INDEPENDENT
                );
    }
#else
    LL_ADC_SetCommonClock(ADCxy_COMMON, ADC_CommonInitStruct->CommonClock);
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4619      	mov	r1, r3
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f7ff ffb4 	bl	8001932 <LL_ADC_SetCommonClock>
 80019ca:	e001      	b.n	80019d0 <LL_ADC_CommonInit+0x2c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40012000 	.word	0x40012000

080019e0 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80019ea:	2300      	movs	r3, #0
 80019ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff ffc5 	bl	800197e <LL_ADC_IsEnabled>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d117      	bne.n	8001a2a <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001a02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a06:	683a      	ldr	r2, [r7, #0]
 8001a08:	6811      	ldr	r1, [r2, #0]
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	6892      	ldr	r2, [r2, #8]
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	431a      	orrs	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	431a      	orrs	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	e001      	b.n	8001a2e <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001a42:	2300      	movs	r3, #0
 8001a44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(ADC_REG_InitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff ff99 	bl	800197e <LL_ADC_IsEnabled>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d12b      	bne.n	8001aaa <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d009      	beq.n	8001a6e <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	431a      	orrs	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	605a      	str	r2, [r3, #4]
 8001a6c:	e005      	b.n	8001a7a <LL_ADC_REG_Init+0x42>
                   ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	605a      	str	r2, [r3, #4]
                ,
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <LL_ADC_REG_Init+0x80>)
 8001a80:	4013      	ands	r3, r2
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	6812      	ldr	r2, [r2, #0]
 8001a86:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	68d2      	ldr	r2, [r2, #12]
 8001a8e:	4311      	orrs	r1, r2
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	6912      	ldr	r2, [r2, #16]
 8001a94:	430a      	orrs	r2, r1
 8001a96:	431a      	orrs	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff ff58 	bl	8001958 <LL_ADC_REG_SetSequencerLength>
 8001aa8:	e001      	b.n	8001aae <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	c0fffcfd 	.word	0xc0fffcfd

08001abc <LL_GPIO_SetPinMode>:
{
 8001abc:	b480      	push	{r7}
 8001abe:	b089      	sub	sp, #36	; 0x24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	fa93 f3a3 	rbit	r3, r3
 8001ad6:	613b      	str	r3, [r7, #16]
  return result;
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	fab3 f383 	clz	r3, r3
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	2103      	movs	r1, #3
 8001ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	401a      	ands	r2, r3
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	fa93 f3a3 	rbit	r3, r3
 8001af6:	61bb      	str	r3, [r7, #24]
  return result;
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	fab3 f383 	clz	r3, r3
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	fa01 f303 	lsl.w	r3, r1, r3
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	601a      	str	r2, [r3, #0]
}
 8001b0e:	bf00      	nop
 8001b10:	3724      	adds	r7, #36	; 0x24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <LL_GPIO_SetPinOutputType>:
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b089      	sub	sp, #36	; 0x24
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	60f8      	str	r0, [r7, #12]
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, (GPIO_OTYPER_OT_0 << POSITION_VAL(Pin)), (OutputType << POSITION_VAL(Pin)));
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	fa93 f3a3 	rbit	r3, r3
 8001b34:	613b      	str	r3, [r7, #16]
  return result;
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	fab3 f383 	clz	r3, r3
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	4619      	mov	r1, r3
 8001b40:	2301      	movs	r3, #1
 8001b42:	408b      	lsls	r3, r1
 8001b44:	43db      	mvns	r3, r3
 8001b46:	401a      	ands	r2, r3
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	fa93 f3a3 	rbit	r3, r3
 8001b52:	61bb      	str	r3, [r7, #24]
  return result;
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	fab3 f383 	clz	r3, r3
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	408b      	lsls	r3, r1
 8001b62:	431a      	orrs	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	605a      	str	r2, [r3, #4]
}
 8001b68:	bf00      	nop
 8001b6a:	3724      	adds	r7, #36	; 0x24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <LL_GPIO_SetPinSpeed>:
{
 8001b74:	b480      	push	{r7}
 8001b76:	b089      	sub	sp, #36	; 0x24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	fa93 f3a3 	rbit	r3, r3
 8001b8e:	613b      	str	r3, [r7, #16]
  return result;
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	fab3 f383 	clz	r3, r3
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	2103      	movs	r1, #3
 8001b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	401a      	ands	r2, r3
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	fa93 f3a3 	rbit	r3, r3
 8001bae:	61bb      	str	r3, [r7, #24]
  return result;
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	fab3 f383 	clz	r3, r3
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc0:	431a      	orrs	r2, r3
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	609a      	str	r2, [r3, #8]
}
 8001bc6:	bf00      	nop
 8001bc8:	3724      	adds	r7, #36	; 0x24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <LL_GPIO_SetPinPull>:
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b089      	sub	sp, #36	; 0x24
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	60f8      	str	r0, [r7, #12]
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	68da      	ldr	r2, [r3, #12]
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	fa93 f3a3 	rbit	r3, r3
 8001bec:	613b      	str	r3, [r7, #16]
  return result;
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	fab3 f383 	clz	r3, r3
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	2103      	movs	r1, #3
 8001bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	401a      	ands	r2, r3
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	fa93 f3a3 	rbit	r3, r3
 8001c0c:	61bb      	str	r3, [r7, #24]
  return result;
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	fab3 f383 	clz	r3, r3
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	6879      	ldr	r1, [r7, #4]
 8001c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	60da      	str	r2, [r3, #12]
}
 8001c24:	bf00      	nop
 8001c26:	3724      	adds	r7, #36	; 0x24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <LL_GPIO_SetAFPin_0_7>:
{
 8001c30:	b480      	push	{r7}
 8001c32:	b089      	sub	sp, #36	; 0x24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6a1a      	ldr	r2, [r3, #32]
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	fa93 f3a3 	rbit	r3, r3
 8001c4a:	613b      	str	r3, [r7, #16]
  return result;
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	fab3 f383 	clz	r3, r3
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	210f      	movs	r1, #15
 8001c58:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	401a      	ands	r2, r3
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	fa93 f3a3 	rbit	r3, r3
 8001c6a:	61bb      	str	r3, [r7, #24]
  return result;
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	fab3 f383 	clz	r3, r3
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	621a      	str	r2, [r3, #32]
}
 8001c82:	bf00      	nop
 8001c84:	3724      	adds	r7, #36	; 0x24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <LL_GPIO_SetAFPin_8_15>:
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b089      	sub	sp, #36	; 0x24
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	60f8      	str	r0, [r7, #12]
 8001c96:	60b9      	str	r1, [r7, #8]
 8001c98:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	0a1b      	lsrs	r3, r3, #8
 8001ca2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	fa93 f3a3 	rbit	r3, r3
 8001caa:	613b      	str	r3, [r7, #16]
  return result;
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	fab3 f383 	clz	r3, r3
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	210f      	movs	r1, #15
 8001cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	401a      	ands	r2, r3
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	0a1b      	lsrs	r3, r3, #8
 8001cc4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	fa93 f3a3 	rbit	r3, r3
 8001ccc:	61bb      	str	r3, [r7, #24]
  return result;
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	fab3 f383 	clz	r3, r3
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	6879      	ldr	r1, [r7, #4]
 8001cda:	fa01 f303 	lsl.w	r3, r1, r3
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001ce4:	bf00      	nop
 8001ce6:	3724      	adds	r7, #36	; 0x24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b088      	sub	sp, #32
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	fa93 f3a3 	rbit	r3, r3
 8001d0e:	613b      	str	r3, [r7, #16]
  return result;
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	fab3 f383 	clz	r3, r3
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001d1a:	e050      	b.n	8001dbe <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	2101      	movs	r1, #1
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	fa01 f303 	lsl.w	r3, r1, r3
 8001d28:	4013      	ands	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d042      	beq.n	8001db8 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d003      	beq.n	8001d42 <LL_GPIO_Init+0x52>
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d10d      	bne.n	8001d5e <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	461a      	mov	r2, r3
 8001d48:	69b9      	ldr	r1, [r7, #24]
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7ff ff12 	bl	8001b74 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	461a      	mov	r2, r3
 8001d56:	69b9      	ldr	r1, [r7, #24]
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f7ff fede 	bl	8001b1a <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	461a      	mov	r2, r3
 8001d64:	69b9      	ldr	r1, [r7, #24]
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7ff ff33 	bl	8001bd2 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d11a      	bne.n	8001daa <LL_GPIO_Init+0xba>
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	fa93 f3a3 	rbit	r3, r3
 8001d7e:	60bb      	str	r3, [r7, #8]
  return result;
 8001d80:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001d82:	fab3 f383 	clz	r3, r3
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b07      	cmp	r3, #7
 8001d8a:	d807      	bhi.n	8001d9c <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	695b      	ldr	r3, [r3, #20]
 8001d90:	461a      	mov	r2, r3
 8001d92:	69b9      	ldr	r1, [r7, #24]
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff ff4b 	bl	8001c30 <LL_GPIO_SetAFPin_0_7>
 8001d9a:	e006      	b.n	8001daa <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	695b      	ldr	r3, [r3, #20]
 8001da0:	461a      	mov	r2, r3
 8001da2:	69b9      	ldr	r1, [r7, #24]
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f7ff ff72 	bl	8001c8e <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	461a      	mov	r2, r3
 8001db0:	69b9      	ldr	r1, [r7, #24]
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7ff fe82 	bl	8001abc <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1a7      	bne.n	8001d1c <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3720      	adds	r7, #32
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
	...

08001dd8 <LL_RCC_GetSysClkSource>:
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001ddc:	4b04      	ldr	r3, [pc, #16]	; (8001df0 <LL_RCC_GetSysClkSource+0x18>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f003 030c 	and.w	r3, r3, #12
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	40023800 	.word	0x40023800

08001df4 <LL_RCC_GetAHBPrescaler>:
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001df8:	4b04      	ldr	r3, [pc, #16]	; (8001e0c <LL_RCC_GetAHBPrescaler+0x18>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	40023800 	.word	0x40023800

08001e10 <LL_RCC_GetAPB1Prescaler>:
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001e14:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	40023800 	.word	0x40023800

08001e2c <LL_RCC_GetAPB2Prescaler>:
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001e30:	4b04      	ldr	r3, [pc, #16]	; (8001e44 <LL_RCC_GetAPB2Prescaler+0x18>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40023800 	.word	0x40023800

08001e48 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001e4c:	4b04      	ldr	r3, [pc, #16]	; (8001e60 <LL_RCC_PLL_GetMainSource+0x18>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40023800 	.word	0x40023800

08001e64 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001e68:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <LL_RCC_PLL_GetN+0x18>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	099b      	lsrs	r3, r3, #6
 8001e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	40023800 	.word	0x40023800

08001e80 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8001e84:	4b04      	ldr	r3, [pc, #16]	; (8001e98 <LL_RCC_PLL_GetP+0x18>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	40023800 	.word	0x40023800

08001e9c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001ea0:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <LL_RCC_PLL_GetDivider+0x18>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	40023800 	.word	0x40023800

08001eb8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001ec0:	f000 f820 	bl	8001f04 <RCC_GetSystemClockFreq>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f000 f83e 	bl	8001f50 <RCC_GetHCLKClockFreq>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f000 f84c 	bl	8001f7c <RCC_GetPCLK1ClockFreq>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 f858 	bl	8001fa4 <RCC_GetPCLK2ClockFreq>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	60da      	str	r2, [r3, #12]
}
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
	...

08001f04 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001f0e:	f7ff ff63 	bl	8001dd8 <LL_RCC_GetSysClkSource>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b04      	cmp	r3, #4
 8001f16:	d006      	beq.n	8001f26 <RCC_GetSystemClockFreq+0x22>
 8001f18:	2b08      	cmp	r3, #8
 8001f1a:	d007      	beq.n	8001f2c <RCC_GetSystemClockFreq+0x28>
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d10a      	bne.n	8001f36 <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001f20:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <RCC_GetSystemClockFreq+0x44>)
 8001f22:	607b      	str	r3, [r7, #4]
      break;
 8001f24:	e00a      	b.n	8001f3c <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001f26:	4b09      	ldr	r3, [pc, #36]	; (8001f4c <RCC_GetSystemClockFreq+0x48>)
 8001f28:	607b      	str	r3, [r7, #4]
      break;
 8001f2a:	e007      	b.n	8001f3c <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8001f2c:	2008      	movs	r0, #8
 8001f2e:	f000 f84d 	bl	8001fcc <RCC_PLL_GetFreqDomain_SYS>
 8001f32:	6078      	str	r0, [r7, #4]
      break;
 8001f34:	e002      	b.n	8001f3c <RCC_GetSystemClockFreq+0x38>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8001f36:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <RCC_GetSystemClockFreq+0x44>)
 8001f38:	607b      	str	r3, [r7, #4]
      break;
 8001f3a:	bf00      	nop
  }

  return frequency;
 8001f3c:	687b      	ldr	r3, [r7, #4]
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	00f42400 	.word	0x00f42400
 8001f4c:	017d7840 	.word	0x017d7840

08001f50 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001f58:	f7ff ff4c 	bl	8001df4 <LL_RCC_GetAHBPrescaler>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	091b      	lsrs	r3, r3, #4
 8001f60:	f003 030f 	and.w	r3, r3, #15
 8001f64:	4a04      	ldr	r2, [pc, #16]	; (8001f78 <RCC_GetHCLKClockFreq+0x28>)
 8001f66:	5cd3      	ldrb	r3, [r2, r3]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	40d3      	lsrs	r3, r2
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	08002b88 	.word	0x08002b88

08001f7c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001f84:	f7ff ff44 	bl	8001e10 <LL_RCC_GetAPB1Prescaler>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	0a9b      	lsrs	r3, r3, #10
 8001f8c:	4a04      	ldr	r2, [pc, #16]	; (8001fa0 <RCC_GetPCLK1ClockFreq+0x24>)
 8001f8e:	5cd3      	ldrb	r3, [r2, r3]
 8001f90:	461a      	mov	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	40d3      	lsrs	r3, r2
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	08002b98 	.word	0x08002b98

08001fa4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001fac:	f7ff ff3e 	bl	8001e2c <LL_RCC_GetAPB2Prescaler>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	0b5b      	lsrs	r3, r3, #13
 8001fb4:	4a04      	ldr	r2, [pc, #16]	; (8001fc8 <RCC_GetPCLK2ClockFreq+0x24>)
 8001fb6:	5cd3      	ldrb	r3, [r2, r3]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	40d3      	lsrs	r3, r2
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	08002b98 	.word	0x08002b98

08001fcc <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8001fcc:	b590      	push	{r4, r7, lr}
 8001fce:	b087      	sub	sp, #28
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	2300      	movs	r3, #0
 8001fde:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001fe0:	f7ff ff32 	bl	8001e48 <LL_RCC_PLL_GetMainSource>
 8001fe4:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8001fec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ff0:	d003      	beq.n	8001ffa <RCC_PLL_GetFreqDomain_SYS+0x2e>
 8001ff2:	e005      	b.n	8002000 <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8001ff4:	4b12      	ldr	r3, [pc, #72]	; (8002040 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001ff6:	617b      	str	r3, [r7, #20]
      break;
 8001ff8:	e005      	b.n	8002006 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001ffa:	4b12      	ldr	r3, [pc, #72]	; (8002044 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8001ffc:	617b      	str	r3, [r7, #20]
      break;
 8001ffe:	e002      	b.n	8002006 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 8002000:	4b0f      	ldr	r3, [pc, #60]	; (8002040 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002002:	617b      	str	r3, [r7, #20]
      break;
 8002004:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b08      	cmp	r3, #8
 800200a:	d113      	bne.n	8002034 <RCC_PLL_GetFreqDomain_SYS+0x68>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800200c:	f7ff ff46 	bl	8001e9c <LL_RCC_PLL_GetDivider>
 8002010:	4602      	mov	r2, r0
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	fbb3 f4f2 	udiv	r4, r3, r2
 8002018:	f7ff ff24 	bl	8001e64 <LL_RCC_PLL_GetN>
 800201c:	4603      	mov	r3, r0
 800201e:	fb03 f404 	mul.w	r4, r3, r4
 8002022:	f7ff ff2d 	bl	8001e80 <LL_RCC_PLL_GetP>
 8002026:	4603      	mov	r3, r0
 8002028:	0c1b      	lsrs	r3, r3, #16
 800202a:	3301      	adds	r3, #1
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	fbb4 f3f3 	udiv	r3, r4, r3
 8002032:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8002034:	693b      	ldr	r3, [r7, #16]
}
 8002036:	4618      	mov	r0, r3
 8002038:	371c      	adds	r7, #28
 800203a:	46bd      	mov	sp, r7
 800203c:	bd90      	pop	{r4, r7, pc}
 800203e:	bf00      	nop
 8002040:	00f42400 	.word	0x00f42400
 8002044:	017d7840 	.word	0x017d7840

08002048 <LL_TIM_SetPrescaler>:
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <LL_TIM_SetAutoReload>:
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <LL_TIM_SetRepetitionCounter>:
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <LL_TIM_OC_SetCompareCH1>:
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	635a      	str	r2, [r3, #52]	; 0x34
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <LL_TIM_OC_SetCompareCH2>:
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <LL_TIM_OC_SetCompareCH3>:
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <LL_TIM_OC_SetCompareCH4>:
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	f043 0201 	orr.w	r2, r3, #1
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	615a      	str	r2, [r3, #20]
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a31      	ldr	r2, [pc, #196]	; (8002204 <LL_TIM_Init+0xd8>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d00f      	beq.n	8002164 <LL_TIM_Init+0x38>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800214a:	d00b      	beq.n	8002164 <LL_TIM_Init+0x38>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a2e      	ldr	r2, [pc, #184]	; (8002208 <LL_TIM_Init+0xdc>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d007      	beq.n	8002164 <LL_TIM_Init+0x38>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a2d      	ldr	r2, [pc, #180]	; (800220c <LL_TIM_Init+0xe0>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d003      	beq.n	8002164 <LL_TIM_Init+0x38>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a2c      	ldr	r2, [pc, #176]	; (8002210 <LL_TIM_Init+0xe4>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d106      	bne.n	8002172 <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	4313      	orrs	r3, r2
 8002170:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a23      	ldr	r2, [pc, #140]	; (8002204 <LL_TIM_Init+0xd8>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d01b      	beq.n	80021b2 <LL_TIM_Init+0x86>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002180:	d017      	beq.n	80021b2 <LL_TIM_Init+0x86>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a20      	ldr	r2, [pc, #128]	; (8002208 <LL_TIM_Init+0xdc>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d013      	beq.n	80021b2 <LL_TIM_Init+0x86>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a1f      	ldr	r2, [pc, #124]	; (800220c <LL_TIM_Init+0xe0>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d00f      	beq.n	80021b2 <LL_TIM_Init+0x86>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a1e      	ldr	r2, [pc, #120]	; (8002210 <LL_TIM_Init+0xe4>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d00b      	beq.n	80021b2 <LL_TIM_Init+0x86>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a1d      	ldr	r2, [pc, #116]	; (8002214 <LL_TIM_Init+0xe8>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d007      	beq.n	80021b2 <LL_TIM_Init+0x86>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a1c      	ldr	r2, [pc, #112]	; (8002218 <LL_TIM_Init+0xec>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d003      	beq.n	80021b2 <LL_TIM_Init+0x86>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a1b      	ldr	r2, [pc, #108]	; (800221c <LL_TIM_Init+0xf0>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d106      	bne.n	80021c0 <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	4313      	orrs	r3, r2
 80021be:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	4619      	mov	r1, r3
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f7ff ff49 	bl	8002064 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	881b      	ldrh	r3, [r3, #0]
 80021d6:	4619      	mov	r1, r3
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7ff ff35 	bl	8002048 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a08      	ldr	r2, [pc, #32]	; (8002204 <LL_TIM_Init+0xd8>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d105      	bne.n	80021f2 <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	7c1b      	ldrb	r3, [r3, #16]
 80021ea:	4619      	mov	r1, r3
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f7ff ff47 	bl	8002080 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f7ff ff8a 	bl	800210c <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40010000 	.word	0x40010000
 8002208:	40000400 	.word	0x40000400
 800220c:	40000800 	.word	0x40000800
 8002210:	40000c00 	.word	0x40000c00
 8002214:	40014000 	.word	0x40014000
 8002218:	40014400 	.word	0x40014400
 800221c:	40014800 	.word	0x40014800

08002220 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	2b10      	cmp	r3, #16
 8002234:	d012      	beq.n	800225c <LL_TIM_OC_Init+0x3c>
 8002236:	2b10      	cmp	r3, #16
 8002238:	d802      	bhi.n	8002240 <LL_TIM_OC_Init+0x20>
 800223a:	2b01      	cmp	r3, #1
 800223c:	d007      	beq.n	800224e <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 800223e:	e022      	b.n	8002286 <LL_TIM_OC_Init+0x66>
  switch (Channel)
 8002240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002244:	d011      	beq.n	800226a <LL_TIM_OC_Init+0x4a>
 8002246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800224a:	d015      	beq.n	8002278 <LL_TIM_OC_Init+0x58>
      break;
 800224c:	e01b      	b.n	8002286 <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f000 f81d 	bl	8002290 <OC1Config>
 8002256:	4603      	mov	r3, r0
 8002258:	75fb      	strb	r3, [r7, #23]
      break;
 800225a:	e014      	b.n	8002286 <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f000 f87c 	bl	800235c <OC2Config>
 8002264:	4603      	mov	r3, r0
 8002266:	75fb      	strb	r3, [r7, #23]
      break;
 8002268:	e00d      	b.n	8002286 <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	f000 f8df 	bl	8002430 <OC3Config>
 8002272:	4603      	mov	r3, r0
 8002274:	75fb      	strb	r3, [r7, #23]
      break;
 8002276:	e006      	b.n	8002286 <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f000 f942 	bl	8002504 <OC4Config>
 8002280:	4603      	mov	r3, r0
 8002282:	75fb      	strb	r3, [r7, #23]
      break;
 8002284:	bf00      	nop
  }

  return result;
 8002286:	7dfb      	ldrb	r3, [r7, #23]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	f023 0201 	bic.w	r2, r3, #1
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f023 0303 	bic.w	r3, r3, #3
 80022be:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	f023 0202 	bic.w	r2, r3, #2
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	4313      	orrs	r3, r2
 80022da:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	f023 0201 	bic.w	r2, r3, #1
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a1a      	ldr	r2, [pc, #104]	; (8002358 <OC1Config+0xc8>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d11e      	bne.n	8002330 <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	f023 0208 	bic.w	r2, r3, #8
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4313      	orrs	r3, r2
 8002300:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	f023 0204 	bic.w	r2, r3, #4
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4313      	orrs	r3, r2
 8002310:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	4313      	orrs	r3, r2
 800231e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	4313      	orrs	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	4619      	mov	r1, r3
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7ff feaa 	bl	800209c <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40010000 	.word	0x40010000

0800235c <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	f023 0210 	bic.w	r2, r3, #16
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a1b      	ldr	r3, [r3, #32]
 8002376:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800238a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	021b      	lsls	r3, r3, #8
 8002398:	4313      	orrs	r3, r2
 800239a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	f023 0220 	bic.w	r2, r3, #32
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	011b      	lsls	r3, r3, #4
 80023a8:	4313      	orrs	r3, r2
 80023aa:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	f023 0210 	bic.w	r2, r3, #16
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	011b      	lsls	r3, r3, #4
 80023b8:	4313      	orrs	r3, r2
 80023ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a1b      	ldr	r2, [pc, #108]	; (800242c <OC2Config+0xd0>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d11f      	bne.n	8002404 <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	019b      	lsls	r3, r3, #6
 80023d0:	4313      	orrs	r3, r2
 80023d2:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	019b      	lsls	r3, r3, #6
 80023e0:	4313      	orrs	r3, r2
 80023e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4313      	orrs	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	4313      	orrs	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	4619      	mov	r1, r3
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f7ff fe4e 	bl	80020b8 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3718      	adds	r7, #24
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40010000 	.word	0x40010000

08002430 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f023 0303 	bic.w	r3, r3, #3
 800245e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4313      	orrs	r3, r2
 800246c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	691b      	ldr	r3, [r3, #16]
 8002478:	021b      	lsls	r3, r3, #8
 800247a:	4313      	orrs	r3, r2
 800247c:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	021b      	lsls	r3, r3, #8
 800248a:	4313      	orrs	r3, r2
 800248c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a1b      	ldr	r2, [pc, #108]	; (8002500 <OC3Config+0xd0>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d11f      	bne.n	80024d6 <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	029b      	lsls	r3, r3, #10
 80024a2:	4313      	orrs	r3, r2
 80024a4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	029b      	lsls	r3, r3, #10
 80024b2:	4313      	orrs	r3, r2
 80024b4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	011b      	lsls	r3, r3, #4
 80024c2:	4313      	orrs	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	69db      	ldr	r3, [r3, #28]
 80024d0:	015b      	lsls	r3, r3, #5
 80024d2:	4313      	orrs	r3, r2
 80024d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	4619      	mov	r1, r3
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7ff fdf3 	bl	80020d4 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40010000 	.word	0x40010000

08002504 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002532:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	021b      	lsls	r3, r3, #8
 8002540:	4313      	orrs	r3, r2
 8002542:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	031b      	lsls	r3, r3, #12
 8002550:	4313      	orrs	r3, r2
 8002552:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	031b      	lsls	r3, r3, #12
 8002560:	4313      	orrs	r3, r2
 8002562:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a0f      	ldr	r2, [pc, #60]	; (80025a4 <OC4Config+0xa0>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d107      	bne.n	800257c <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	019b      	lsls	r3, r3, #6
 8002578:	4313      	orrs	r3, r2
 800257a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	4619      	mov	r1, r3
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7ff fdae 	bl	80020f0 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3718      	adds	r7, #24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40010000 	.word	0x40010000

080025a8 <LL_USART_IsEnabled>:
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025bc:	bf0c      	ite	eq
 80025be:	2301      	moveq	r3, #1
 80025c0:	2300      	movne	r3, #0
 80025c2:	b2db      	uxtb	r3, r3
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <LL_USART_SetStopBitsLength>:
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	431a      	orrs	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	611a      	str	r2, [r3, #16]
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <LL_USART_SetHWFlowCtrl>:
{
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
 80025fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	695b      	ldr	r3, [r3, #20]
 8002604:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	615a      	str	r2, [r3, #20]
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <LL_USART_SetBaudRate>:
{
 800261c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002620:	b085      	sub	sp, #20
 8002622:	af00      	add	r7, sp, #0
 8002624:	60f8      	str	r0, [r7, #12]
 8002626:	60b9      	str	r1, [r7, #8]
 8002628:	607a      	str	r2, [r7, #4]
 800262a:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002632:	f040 80c1 	bne.w	80027b8 <LL_USART_SetBaudRate+0x19c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	461d      	mov	r5, r3
 800263a:	f04f 0600 	mov.w	r6, #0
 800263e:	46a8      	mov	r8, r5
 8002640:	46b1      	mov	r9, r6
 8002642:	eb18 0308 	adds.w	r3, r8, r8
 8002646:	eb49 0409 	adc.w	r4, r9, r9
 800264a:	4698      	mov	r8, r3
 800264c:	46a1      	mov	r9, r4
 800264e:	eb18 0805 	adds.w	r8, r8, r5
 8002652:	eb49 0906 	adc.w	r9, r9, r6
 8002656:	f04f 0100 	mov.w	r1, #0
 800265a:	f04f 0200 	mov.w	r2, #0
 800265e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002662:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002666:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800266a:	4688      	mov	r8, r1
 800266c:	4691      	mov	r9, r2
 800266e:	eb18 0005 	adds.w	r0, r8, r5
 8002672:	eb49 0106 	adc.w	r1, r9, r6
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	461d      	mov	r5, r3
 800267a:	f04f 0600 	mov.w	r6, #0
 800267e:	196b      	adds	r3, r5, r5
 8002680:	eb46 0406 	adc.w	r4, r6, r6
 8002684:	461a      	mov	r2, r3
 8002686:	4623      	mov	r3, r4
 8002688:	f7fd fda4 	bl	80001d4 <__aeabi_uldivmod>
 800268c:	4603      	mov	r3, r0
 800268e:	460c      	mov	r4, r1
 8002690:	461a      	mov	r2, r3
 8002692:	4bb5      	ldr	r3, [pc, #724]	; (8002968 <LL_USART_SetBaudRate+0x34c>)
 8002694:	fba3 2302 	umull	r2, r3, r3, r2
 8002698:	095b      	lsrs	r3, r3, #5
 800269a:	b29b      	uxth	r3, r3
 800269c:	011b      	lsls	r3, r3, #4
 800269e:	fa1f f883 	uxth.w	r8, r3
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	461d      	mov	r5, r3
 80026a6:	f04f 0600 	mov.w	r6, #0
 80026aa:	46a9      	mov	r9, r5
 80026ac:	46b2      	mov	sl, r6
 80026ae:	eb19 0309 	adds.w	r3, r9, r9
 80026b2:	eb4a 040a 	adc.w	r4, sl, sl
 80026b6:	4699      	mov	r9, r3
 80026b8:	46a2      	mov	sl, r4
 80026ba:	eb19 0905 	adds.w	r9, r9, r5
 80026be:	eb4a 0a06 	adc.w	sl, sl, r6
 80026c2:	f04f 0100 	mov.w	r1, #0
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80026d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80026d6:	4689      	mov	r9, r1
 80026d8:	4692      	mov	sl, r2
 80026da:	eb19 0005 	adds.w	r0, r9, r5
 80026de:	eb4a 0106 	adc.w	r1, sl, r6
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	461d      	mov	r5, r3
 80026e6:	f04f 0600 	mov.w	r6, #0
 80026ea:	196b      	adds	r3, r5, r5
 80026ec:	eb46 0406 	adc.w	r4, r6, r6
 80026f0:	461a      	mov	r2, r3
 80026f2:	4623      	mov	r3, r4
 80026f4:	f7fd fd6e 	bl	80001d4 <__aeabi_uldivmod>
 80026f8:	4603      	mov	r3, r0
 80026fa:	460c      	mov	r4, r1
 80026fc:	461a      	mov	r2, r3
 80026fe:	4b9a      	ldr	r3, [pc, #616]	; (8002968 <LL_USART_SetBaudRate+0x34c>)
 8002700:	fba3 1302 	umull	r1, r3, r3, r2
 8002704:	095b      	lsrs	r3, r3, #5
 8002706:	2164      	movs	r1, #100	; 0x64
 8002708:	fb01 f303 	mul.w	r3, r1, r3
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	3332      	adds	r3, #50	; 0x32
 8002712:	4a95      	ldr	r2, [pc, #596]	; (8002968 <LL_USART_SetBaudRate+0x34c>)
 8002714:	fba2 2303 	umull	r2, r3, r2, r3
 8002718:	095b      	lsrs	r3, r3, #5
 800271a:	b29b      	uxth	r3, r3
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	b29b      	uxth	r3, r3
 8002720:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002724:	b29b      	uxth	r3, r3
 8002726:	4443      	add	r3, r8
 8002728:	fa1f f883 	uxth.w	r8, r3
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	461d      	mov	r5, r3
 8002730:	f04f 0600 	mov.w	r6, #0
 8002734:	46a9      	mov	r9, r5
 8002736:	46b2      	mov	sl, r6
 8002738:	eb19 0309 	adds.w	r3, r9, r9
 800273c:	eb4a 040a 	adc.w	r4, sl, sl
 8002740:	4699      	mov	r9, r3
 8002742:	46a2      	mov	sl, r4
 8002744:	eb19 0905 	adds.w	r9, r9, r5
 8002748:	eb4a 0a06 	adc.w	sl, sl, r6
 800274c:	f04f 0100 	mov.w	r1, #0
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002758:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800275c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002760:	4689      	mov	r9, r1
 8002762:	4692      	mov	sl, r2
 8002764:	eb19 0005 	adds.w	r0, r9, r5
 8002768:	eb4a 0106 	adc.w	r1, sl, r6
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	461d      	mov	r5, r3
 8002770:	f04f 0600 	mov.w	r6, #0
 8002774:	196b      	adds	r3, r5, r5
 8002776:	eb46 0406 	adc.w	r4, r6, r6
 800277a:	461a      	mov	r2, r3
 800277c:	4623      	mov	r3, r4
 800277e:	f7fd fd29 	bl	80001d4 <__aeabi_uldivmod>
 8002782:	4603      	mov	r3, r0
 8002784:	460c      	mov	r4, r1
 8002786:	461a      	mov	r2, r3
 8002788:	4b77      	ldr	r3, [pc, #476]	; (8002968 <LL_USART_SetBaudRate+0x34c>)
 800278a:	fba3 1302 	umull	r1, r3, r3, r2
 800278e:	095b      	lsrs	r3, r3, #5
 8002790:	2164      	movs	r1, #100	; 0x64
 8002792:	fb01 f303 	mul.w	r3, r1, r3
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	3332      	adds	r3, #50	; 0x32
 800279c:	4a72      	ldr	r2, [pc, #456]	; (8002968 <LL_USART_SetBaudRate+0x34c>)
 800279e:	fba2 2303 	umull	r2, r3, r2, r3
 80027a2:	095b      	lsrs	r3, r3, #5
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	4443      	add	r3, r8
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	461a      	mov	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	609a      	str	r2, [r3, #8]
}
 80027b6:	e0d2      	b.n	800295e <LL_USART_SetBaudRate+0x342>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	469a      	mov	sl, r3
 80027bc:	f04f 0b00 	mov.w	fp, #0
 80027c0:	46d0      	mov	r8, sl
 80027c2:	46d9      	mov	r9, fp
 80027c4:	eb18 0308 	adds.w	r3, r8, r8
 80027c8:	eb49 0409 	adc.w	r4, r9, r9
 80027cc:	4698      	mov	r8, r3
 80027ce:	46a1      	mov	r9, r4
 80027d0:	eb18 080a 	adds.w	r8, r8, sl
 80027d4:	eb49 090b 	adc.w	r9, r9, fp
 80027d8:	f04f 0100 	mov.w	r1, #0
 80027dc:	f04f 0200 	mov.w	r2, #0
 80027e0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80027e4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80027e8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80027ec:	4688      	mov	r8, r1
 80027ee:	4691      	mov	r9, r2
 80027f0:	eb1a 0508 	adds.w	r5, sl, r8
 80027f4:	eb4b 0609 	adc.w	r6, fp, r9
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	4619      	mov	r1, r3
 80027fc:	f04f 0200 	mov.w	r2, #0
 8002800:	f04f 0300 	mov.w	r3, #0
 8002804:	f04f 0400 	mov.w	r4, #0
 8002808:	0094      	lsls	r4, r2, #2
 800280a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800280e:	008b      	lsls	r3, r1, #2
 8002810:	461a      	mov	r2, r3
 8002812:	4623      	mov	r3, r4
 8002814:	4628      	mov	r0, r5
 8002816:	4631      	mov	r1, r6
 8002818:	f7fd fcdc 	bl	80001d4 <__aeabi_uldivmod>
 800281c:	4603      	mov	r3, r0
 800281e:	460c      	mov	r4, r1
 8002820:	461a      	mov	r2, r3
 8002822:	4b51      	ldr	r3, [pc, #324]	; (8002968 <LL_USART_SetBaudRate+0x34c>)
 8002824:	fba3 2302 	umull	r2, r3, r3, r2
 8002828:	095b      	lsrs	r3, r3, #5
 800282a:	b29b      	uxth	r3, r3
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	fa1f f883 	uxth.w	r8, r3
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	469b      	mov	fp, r3
 8002836:	f04f 0c00 	mov.w	ip, #0
 800283a:	46d9      	mov	r9, fp
 800283c:	46e2      	mov	sl, ip
 800283e:	eb19 0309 	adds.w	r3, r9, r9
 8002842:	eb4a 040a 	adc.w	r4, sl, sl
 8002846:	4699      	mov	r9, r3
 8002848:	46a2      	mov	sl, r4
 800284a:	eb19 090b 	adds.w	r9, r9, fp
 800284e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002852:	f04f 0100 	mov.w	r1, #0
 8002856:	f04f 0200 	mov.w	r2, #0
 800285a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800285e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002862:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002866:	4689      	mov	r9, r1
 8002868:	4692      	mov	sl, r2
 800286a:	eb1b 0509 	adds.w	r5, fp, r9
 800286e:	eb4c 060a 	adc.w	r6, ip, sl
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	4619      	mov	r1, r3
 8002876:	f04f 0200 	mov.w	r2, #0
 800287a:	f04f 0300 	mov.w	r3, #0
 800287e:	f04f 0400 	mov.w	r4, #0
 8002882:	0094      	lsls	r4, r2, #2
 8002884:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002888:	008b      	lsls	r3, r1, #2
 800288a:	461a      	mov	r2, r3
 800288c:	4623      	mov	r3, r4
 800288e:	4628      	mov	r0, r5
 8002890:	4631      	mov	r1, r6
 8002892:	f7fd fc9f 	bl	80001d4 <__aeabi_uldivmod>
 8002896:	4603      	mov	r3, r0
 8002898:	460c      	mov	r4, r1
 800289a:	461a      	mov	r2, r3
 800289c:	4b32      	ldr	r3, [pc, #200]	; (8002968 <LL_USART_SetBaudRate+0x34c>)
 800289e:	fba3 1302 	umull	r1, r3, r3, r2
 80028a2:	095b      	lsrs	r3, r3, #5
 80028a4:	2164      	movs	r1, #100	; 0x64
 80028a6:	fb01 f303 	mul.w	r3, r1, r3
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	011b      	lsls	r3, r3, #4
 80028ae:	3332      	adds	r3, #50	; 0x32
 80028b0:	4a2d      	ldr	r2, [pc, #180]	; (8002968 <LL_USART_SetBaudRate+0x34c>)
 80028b2:	fba2 2303 	umull	r2, r3, r2, r3
 80028b6:	095b      	lsrs	r3, r3, #5
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028be:	b29b      	uxth	r3, r3
 80028c0:	4443      	add	r3, r8
 80028c2:	fa1f f883 	uxth.w	r8, r3
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	469b      	mov	fp, r3
 80028ca:	f04f 0c00 	mov.w	ip, #0
 80028ce:	46d9      	mov	r9, fp
 80028d0:	46e2      	mov	sl, ip
 80028d2:	eb19 0309 	adds.w	r3, r9, r9
 80028d6:	eb4a 040a 	adc.w	r4, sl, sl
 80028da:	4699      	mov	r9, r3
 80028dc:	46a2      	mov	sl, r4
 80028de:	eb19 090b 	adds.w	r9, r9, fp
 80028e2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80028e6:	f04f 0100 	mov.w	r1, #0
 80028ea:	f04f 0200 	mov.w	r2, #0
 80028ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80028f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80028fa:	4689      	mov	r9, r1
 80028fc:	4692      	mov	sl, r2
 80028fe:	eb1b 0509 	adds.w	r5, fp, r9
 8002902:	eb4c 060a 	adc.w	r6, ip, sl
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	4619      	mov	r1, r3
 800290a:	f04f 0200 	mov.w	r2, #0
 800290e:	f04f 0300 	mov.w	r3, #0
 8002912:	f04f 0400 	mov.w	r4, #0
 8002916:	0094      	lsls	r4, r2, #2
 8002918:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800291c:	008b      	lsls	r3, r1, #2
 800291e:	461a      	mov	r2, r3
 8002920:	4623      	mov	r3, r4
 8002922:	4628      	mov	r0, r5
 8002924:	4631      	mov	r1, r6
 8002926:	f7fd fc55 	bl	80001d4 <__aeabi_uldivmod>
 800292a:	4603      	mov	r3, r0
 800292c:	460c      	mov	r4, r1
 800292e:	461a      	mov	r2, r3
 8002930:	4b0d      	ldr	r3, [pc, #52]	; (8002968 <LL_USART_SetBaudRate+0x34c>)
 8002932:	fba3 1302 	umull	r1, r3, r3, r2
 8002936:	095b      	lsrs	r3, r3, #5
 8002938:	2164      	movs	r1, #100	; 0x64
 800293a:	fb01 f303 	mul.w	r3, r1, r3
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	011b      	lsls	r3, r3, #4
 8002942:	3332      	adds	r3, #50	; 0x32
 8002944:	4a08      	ldr	r2, [pc, #32]	; (8002968 <LL_USART_SetBaudRate+0x34c>)
 8002946:	fba2 2303 	umull	r2, r3, r2, r3
 800294a:	095b      	lsrs	r3, r3, #5
 800294c:	b29b      	uxth	r3, r3
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	b29b      	uxth	r3, r3
 8002954:	4443      	add	r3, r8
 8002956:	b29b      	uxth	r3, r3
 8002958:	461a      	mov	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	609a      	str	r2, [r3, #8]
}
 800295e:	bf00      	nop
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002968:	51eb851f 	.word	0x51eb851f

0800296c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b088      	sub	sp, #32
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800297a:	2300      	movs	r3, #0
 800297c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7ff fe12 	bl	80025a8 <LL_USART_IsEnabled>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d149      	bne.n	8002a1e <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002992:	f023 030c 	bic.w	r3, r3, #12
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	6851      	ldr	r1, [r2, #4]
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	68d2      	ldr	r2, [r2, #12]
 800299e:	4311      	orrs	r1, r2
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	6912      	ldr	r2, [r2, #16]
 80029a4:	4311      	orrs	r1, r2
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	6992      	ldr	r2, [r2, #24]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	431a      	orrs	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	4619      	mov	r1, r3
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7ff fe09 	bl	80025d0 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	4619      	mov	r1, r3
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7ff fe16 	bl	80025f6 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80029ca:	f107 0308 	add.w	r3, r7, #8
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff fa72 	bl	8001eb8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a14      	ldr	r2, [pc, #80]	; (8002a28 <LL_USART_Init+0xbc>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d102      	bne.n	80029e2 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	61bb      	str	r3, [r7, #24]
 80029e0:	e00c      	b.n	80029fc <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a11      	ldr	r2, [pc, #68]	; (8002a2c <LL_USART_Init+0xc0>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d102      	bne.n	80029f0 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	61bb      	str	r3, [r7, #24]
 80029ee:	e005      	b.n	80029fc <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a0f      	ldr	r2, [pc, #60]	; (8002a30 <LL_USART_Init+0xc4>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d101      	bne.n	80029fc <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00d      	beq.n	8002a1e <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d009      	beq.n	8002a1e <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	699a      	ldr	r2, [r3, #24]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	69b9      	ldr	r1, [r7, #24]
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7ff fdff 	bl	800261c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002a1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3720      	adds	r7, #32
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40011000 	.word	0x40011000
 8002a2c:	40004400 	.word	0x40004400
 8002a30:	40011400 	.word	0x40011400

08002a34 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a46:	4a07      	ldr	r2, [pc, #28]	; (8002a64 <LL_InitTick+0x30>)
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002a4c:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <LL_InitTick+0x30>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a52:	4b04      	ldr	r3, [pc, #16]	; (8002a64 <LL_InitTick+0x30>)
 8002a54:	2205      	movs	r2, #5
 8002a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	e000e010 	.word	0xe000e010

08002a68 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002a70:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f7ff ffdd 	bl	8002a34 <LL_InitTick>
}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
	...

08002a84 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002a8c:	4b0e      	ldr	r3, [pc, #56]	; (8002ac8 <LL_mDelay+0x44>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002a92:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a9a:	d00c      	beq.n	8002ab6 <LL_mDelay+0x32>
  {
    Delay++;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8002aa2:	e008      	b.n	8002ab6 <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002aa4:	4b08      	ldr	r3, [pc, #32]	; (8002ac8 <LL_mDelay+0x44>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d002      	beq.n	8002ab6 <LL_mDelay+0x32>
    {
      Delay--;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	607b      	str	r3, [r7, #4]
  while (Delay)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1f3      	bne.n	8002aa4 <LL_mDelay+0x20>
    }
  }
}
 8002abc:	bf00      	nop
 8002abe:	3714      	adds	r7, #20
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	e000e010 	.word	0xe000e010

08002acc <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002ad4:	4a04      	ldr	r2, [pc, #16]	; (8002ae8 <LL_SetSystemCoreClock+0x1c>)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6013      	str	r3, [r2, #0]
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	20000000 	.word	0x20000000

08002aec <__libc_init_array>:
 8002aec:	b570      	push	{r4, r5, r6, lr}
 8002aee:	4e0d      	ldr	r6, [pc, #52]	; (8002b24 <__libc_init_array+0x38>)
 8002af0:	4c0d      	ldr	r4, [pc, #52]	; (8002b28 <__libc_init_array+0x3c>)
 8002af2:	1ba4      	subs	r4, r4, r6
 8002af4:	10a4      	asrs	r4, r4, #2
 8002af6:	2500      	movs	r5, #0
 8002af8:	42a5      	cmp	r5, r4
 8002afa:	d109      	bne.n	8002b10 <__libc_init_array+0x24>
 8002afc:	4e0b      	ldr	r6, [pc, #44]	; (8002b2c <__libc_init_array+0x40>)
 8002afe:	4c0c      	ldr	r4, [pc, #48]	; (8002b30 <__libc_init_array+0x44>)
 8002b00:	f000 f820 	bl	8002b44 <_init>
 8002b04:	1ba4      	subs	r4, r4, r6
 8002b06:	10a4      	asrs	r4, r4, #2
 8002b08:	2500      	movs	r5, #0
 8002b0a:	42a5      	cmp	r5, r4
 8002b0c:	d105      	bne.n	8002b1a <__libc_init_array+0x2e>
 8002b0e:	bd70      	pop	{r4, r5, r6, pc}
 8002b10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b14:	4798      	blx	r3
 8002b16:	3501      	adds	r5, #1
 8002b18:	e7ee      	b.n	8002af8 <__libc_init_array+0xc>
 8002b1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b1e:	4798      	blx	r3
 8002b20:	3501      	adds	r5, #1
 8002b22:	e7f2      	b.n	8002b0a <__libc_init_array+0x1e>
 8002b24:	08002ba8 	.word	0x08002ba8
 8002b28:	08002ba8 	.word	0x08002ba8
 8002b2c:	08002ba8 	.word	0x08002ba8
 8002b30:	08002bac 	.word	0x08002bac

08002b34 <memset>:
 8002b34:	4402      	add	r2, r0
 8002b36:	4603      	mov	r3, r0
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d100      	bne.n	8002b3e <memset+0xa>
 8002b3c:	4770      	bx	lr
 8002b3e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b42:	e7f9      	b.n	8002b38 <memset+0x4>

08002b44 <_init>:
 8002b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b46:	bf00      	nop
 8002b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b4a:	bc08      	pop	{r3}
 8002b4c:	469e      	mov	lr, r3
 8002b4e:	4770      	bx	lr

08002b50 <_fini>:
 8002b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b52:	bf00      	nop
 8002b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b56:	bc08      	pop	{r3}
 8002b58:	469e      	mov	lr, r3
 8002b5a:	4770      	bx	lr
